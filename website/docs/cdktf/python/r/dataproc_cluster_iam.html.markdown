---
subcategory: "Dataproc"
description: |-
 Collection of resources to manage IAM policy for a Dataproc cluster.
---


<!-- Please do not edit this file, it is generated. -->
# IAM policy for Dataproc cluster

Three different resources help you manage IAM policies on dataproc clusters. Each of these resources serves a different use case:

* `google_dataproc_cluster_iam_policy`: Authoritative. Sets the IAM policy for the cluster and replaces any existing policy already attached.
* `google_dataproc_cluster_iam_binding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the cluster are preserved.
* `google_dataproc_cluster_iam_member`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the cluster are preserved.

~> **Note:** `google_dataproc_cluster_iam_policy` **cannot** be used in conjunction with `google_dataproc_cluster_iam_binding` and `google_dataproc_cluster_iam_member` or they will fight over what your policy should be. In addition, be careful not to accidentally unset ownership of the cluster as `google_dataproc_cluster_iam_policy` replaces the entire policy.

~> **Note:** `google_dataproc_cluster_iam_binding` resources **can be** used in conjunction with `google_dataproc_cluster_iam_member` resources **only if** they do not grant privilege to the same role.

## google\_dataproc\_cluster\_iam\_policy

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_google_iam_policy_admin =
        google.data_google_iam_policy.DataGoogleIamPolicy(self, "admin",
            binding=[DataGoogleIamPolicyBinding(
                members=["user:jane@example.com"],
                role="roles/editor"
            )
            ]
        )
        google.dataproc_cluster_iam_policy.DataprocClusterIamPolicy(self, "editor",
            cluster="your-dataproc-cluster",
            policy_data=cdktf.Token.as_string(data_google_iam_policy_admin.policy_data),
            project="your-project",
            region="your-region"
        )
```

## google\_dataproc\_cluster\_iam\_binding

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google.dataproc_cluster_iam_binding.DataprocClusterIamBinding(self, "editor",
            cluster="your-dataproc-cluster",
            members=["user:jane@example.com"],
            role="roles/editor"
        )
```

## google\_dataproc\_cluster\_iam\_member

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google.dataproc_cluster_iam_member.DataprocClusterIamMember(self, "editor",
            cluster="your-dataproc-cluster",
            member="user:jane@example.com",
            role="roles/editor"
        )
```

## Argument Reference

The following arguments are supported:

* `cluster` - (Required) The name or relative resource id of the cluster to manage IAM policies for.

For `google_dataproc_cluster_iam_member` or `google_dataproc_cluster_iam_binding`:

* `member/members` - (Required) Identities that will be granted the privilege in `role`.
  Each entry can have one of the following values:
  * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
  * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
  * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
  * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
  * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
  * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.

* `role` - (Required) The role that should be applied. Only one
    `google_dataproc_cluster_iam_binding` can be used per role. Note that custom roles must be of the format
    `[projects|organizations]/{parent-name}/roles/{role-name}`.

`google_dataproc_cluster_iam_policy` only:
* `policy_data` - (Required) The policy data generated by a `google_iam_policy` data source.

- - -

* `project` - (Optional) The project in which the cluster belongs. If it
    is not provided, Terraform will use the provider default.

* `region` - (Optional) The region in which the cluster belongs. If it
    is not provided, Terraform will use the provider default.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are
exported:

* `etag` - (Computed) The etag of the clusters's IAM policy.

## Import

Cluster IAM resources can be imported using the project, region, cluster name, role and/or member.

```
$ terraform import google_dataproc_cluster_iam_policy.editor "projects/{project}/regions/{region}/clusters/{cluster}"

$ terraform import google_dataproc_cluster_iam_binding.editor "projects/{project}/regions/{region}/clusters/{cluster} roles/editor"

$ terraform import google_dataproc_cluster_iam_member.editor "projects/{project}/regions/{region}/clusters/{cluster} roles/editor user:jane@example.com"
```

-> **Custom Roles**: If you're importing a IAM resource with a custom role, make sure to use the
 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

<!-- cache-key: cdktf-0.17.0-pre.15 input-5a266675de31d6581caa05ca0b80d931077c9cc552412924a7ae87275f729524 -->