---
subcategory: "Cloud Platform"
description: |-
  Allows management of a Google Cloud Platform service account Key
---


<!-- Please do not edit this file, it is generated. -->
# google_service_account_key

Creates and manages service account keys, which allow the use of a service account with Google Cloud.

-> **Warning**: This resource persists a sensitive credential in plaintext in the [remote state](https://www.terraform.io/language/state/sensitive-data) used by Terraform.
Please take appropriate measures to protect your remote state.

* [API documentation](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/iam/docs/creating-managing-service-account-keys)


## Example Usage, creating a new Key

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_service_account_myaccount =
        google.service_account.ServiceAccount(self, "myaccount",
            account_id="myaccount",
            display_name="My Service Account"
        )
        google.service_account_key.ServiceAccountKey(self, "mykey",
            public_key_type="TYPE_X509_PEM_FILE",
            service_account_id=cdktf.Token.as_string(google_service_account_myaccount.name)
        )
```

## Example Usage, creating and regularly rotating a key

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
import ...gen.providers.time as time
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: time.
        #     For a more precise conversion please use the --provider flag in convert.
        google_service_account_myaccount =
        google.service_account.ServiceAccount(self, "myaccount",
            account_id="myaccount",
            display_name="My Service Account"
        )
        time_rotating_mykey_rotation = time.rotating.Rotating(self, "mykey_rotation",
            rotation_days=30
        )
        google.service_account_key.ServiceAccountKey(self, "mykey",
            keepers={
                "rotation_time": cdktf.Token.as_string(time_rotating_mykey_rotation.rotation_rfc3339)
            },
            service_account_id=cdktf.Token.as_string(google_service_account_myaccount.name)
        )
```

## Example Usage, save key in Kubernetes secret - DEPRECATED

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
import ...gen.providers.kubernetes as kubernetes
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: kubernetes.
        #     For a more precise conversion please use the --provider flag in convert.
        google_service_account_myaccount =
        google.service_account.ServiceAccount(self, "myaccount",
            account_id="myaccount",
            display_name="My Service Account"
        )
        google_service_account_key_mykey =
        google.service_account_key.ServiceAccountKey(self, "mykey",
            service_account_id=cdktf.Token.as_string(google_service_account_myaccount.name)
        )
        kubernetes.secret.Secret(self, "google-application-credentials",
            data=[{
                "credentials.json": cdktf.Fn.base64decode(
                    cdktf.Token.as_string(google_service_account_key_mykey.private_key))
            }
            ],
            metadata=[{
                "name": "google-application-credentials"
            }
            ]
        )
```

## Argument Reference

The following arguments are supported:

* `service_account_id` - (Required) The Service account id of the Key. This can be a string in the format
`{ACCOUNT}` or `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. If the `{ACCOUNT}`-only syntax is used, either
the **full** email address of the service account or its name can be specified as a value, in which case the project will
automatically be inferred from the account. Otherwise, if the `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`
syntax is used, the `{ACCOUNT}` specified can be the full email address of the service account or the service account's
unique id. Substituting `-` as a wildcard for the `{PROJECT_ID}` will infer the project from the account.

* `key_algorithm` - (Optional) The algorithm used to generate the key. KEY_ALG_RSA_2048 is the default algorithm.
Valid values are listed at
[ServiceAccountPrivateKeyType](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys#ServiceAccountKeyAlgorithm)
(only used on create)

* `public_key_type` (Optional) The output format of the public key requested. TYPE_X509_PEM_FILE is the default output format.

* `private_key_type` (Optional) The output format of the private key. TYPE_GOOGLE_CREDENTIALS_FILE is the default output format.

* `public_key_data` (Optional) Public key data to create a service account key for given service account. The expected format for this field is a base64 encoded X509_PEM and it conflicts with `public_key_type` and `private_key_type`.

* `keepers` (Optional) Arbitrary map of values that, when changed, will trigger a new key to be generated.

## Attributes Reference

The following attributes are exported in addition to the arguments listed above:

* `id` - an identifier for the resource with format `projects/{{project}}/serviceAccounts/{{account}}/keys/{{key}}`

* `name` - The name used for this key pair

* `public_key` - The public key, base64 encoded

* `private_key` - The private key in JSON format, base64 encoded. This is what you normally get as a file when creating
service account keys through the CLI or web console. This is only populated when creating a new key.

* `valid_after` - The key can be used after this timestamp. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".

* `valid_before` - The key can be used before this timestamp.
A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".

## Import

This resource does not support import.

<!-- cache-key: cdktf-0.17.0-pre.15 input-fb688c8c6d347e663a3def2e90c6aa2538d74142b16a15eb70038b97431f4b78 -->