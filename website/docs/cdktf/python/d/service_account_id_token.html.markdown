---
subcategory: "Cloud Platform"
description: |-
  Produces OpenID Connect token for service accounts
---


<!-- Please do not edit this file, it is generated. -->
# google\_service\_account\_id\_token

This data source provides a Google OpenID Connect (`oidc`) `id_token`.  Tokens issued from this data source are typically used to call external services that accept OIDC tokens for authentication (e.g. [Google Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service)).

For more information see
[OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html#IDToken).

## Example Usage - ServiceAccount JSON credential file.
  `google_service_account_id_token` will use the configured [provider credentials](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#credentials-1)

  ```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_google_service_account_id_token_oidc =
        google.data_google_service_account_id_token.DataGoogleServiceAccountIdToken(self, "oidc",
            target_audience="https://foo.bar/"
        )
        cdktf.TerraformOutput(self, "oidc_token",
            value=data_google_service_account_id_token_oidc.id_token
        )
```

## Example Usage - Service Account Impersonation.
  `google_service_account_access_token` will use background impersonated credentials provided by [google_service_account_access_token](https://registry.terraform.io/providers/hashicorp/google/latest/docs/data-sources/service_account_access_token).

  Note: to use the following, you must grant `target_service_account` the
  `roles/iam.serviceAccountTokenCreator` role on itself.

  ```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_google_service_account_access_token_impersonated =
        google.data_google_service_account_access_token.DataGoogleServiceAccountAccessToken(self, "impersonated",
            delegates=[],
            lifetime="300s",
            provider=google,
            scopes=["userinfo-email", "cloud-platform"],
            target_service_account="impersonated-account@project.iam.gserviceaccount.com"
        )
        google_impersonated = google.provider.GoogleProvider(self, "google",
            access_token=cdktf.Token.as_string(data_google_service_account_access_token_impersonated.access_token),
            alias="impersonated"
        )
        data_google_service_account_id_token_oidc =
        google.data_google_service_account_id_token.DataGoogleServiceAccountIdToken(self, "oidc",
            delegates=[],
            include_email=True,
            provider=google_impersonated,
            target_audience="https://foo.bar/",
            target_service_account="impersonated-account@project.iam.gserviceaccount.com"
        )
        cdktf.TerraformOutput(self, "oidc_token",
            value=data_google_service_account_id_token_oidc.id_token
        )
```

## Example Usage - Invoking Cloud Run Endpoint

  The following configuration will invoke [Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service) endpoint where the service account for Terraform has been granted `roles/run.invoker` role previously.

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
import ...gen.providers.http as http
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: http.
        #     For a more precise conversion please use the --provider flag in convert.
        data_google_service_account_id_token_oidc =
        google.data_google_service_account_id_token.DataGoogleServiceAccountIdToken(self, "oidc",
            target_audience="https://your.cloud.run.app/"
        )
        data_http_cloudrun = http.data_http.DataHttp(self, "cloudrun",
            request_headers=[{
                "Authorization": "Bearer ${" + data_google_service_account_id_token_oidc.id_token + "}"
            }
            ],
            url="https://your.cloud.run.app/"
        )
        cdktf.TerraformOutput(self, "cloud_run_response",
            value=data_http_cloudrun.body
        )
```

## Argument Reference

The following arguments are supported:

* `target_audience` (Required) - The audience claim for the `id_token`.
* `target_service_account` (Optional) - The email of the service account being impersonated.  Used only when using impersonation mode.
* `delegates` (Optional) - Delegate chain of approvals needed to perform full impersonation. Specify the fully qualified service account name.   Used only when using impersonation mode.
* `include_email` (Optional) Include the verified email in the claim. Used only when using impersonation mode.

## Attributes Reference

The following attribute is exported:

* `id_token` - The `id_token` representing the new generated identity.

<!-- cache-key: cdktf-0.17.0-pre.15 input-f1428e0f6fbd8974ee7e454f147d06665532051607c0473ae5f76154faad2cd5 -->