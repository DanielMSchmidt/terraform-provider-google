---
subcategory: "Compute Engine"
description: |-
  Manages a network peering within GCE.
---


<!-- Please do not edit this file, it is generated. -->
# google\_compute\_network\_peering

Manages a network peering within GCE. For more information see
[the official documentation](https://cloud.google.com/compute/docs/vpc/vpc-peering)
and
[API](https://cloud.google.com/compute/docs/reference/latest/networks).

-> Both networks must create a peering with each other for the peering
to be functional.

~> Subnets IP ranges across peered VPC networks cannot overlap.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_compute_network_default =
        google.compute_network.ComputeNetwork(self, "default",
            auto_create_subnetworks=cdktf.Token.as_boolean("false"),
            name="foobar"
        )
        google_compute_network_other = google.compute_network.ComputeNetwork(self, "other",
            auto_create_subnetworks=cdktf.Token.as_boolean("false"),
            name="other"
        )
        google.compute_network_peering.ComputeNetworkPeering(self, "peering1",
            name="peering1",
            network=cdktf.Token.as_string(google_compute_network_default.self_link),
            peer_network=cdktf.Token.as_string(google_compute_network_other.self_link)
        )
        google.compute_network_peering.ComputeNetworkPeering(self, "peering2",
            name="peering2",
            network=cdktf.Token.as_string(google_compute_network_other.self_link),
            peer_network=cdktf.Token.as_string(google_compute_network_default.self_link)
        )
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Name of the peering.

* `network` - (Required) The primary network of the peering.

* `peer_network` - (Required) The peer network in the peering. The peer network
may belong to a different project.

* `export_custom_routes` - (Optional)
Whether to export the custom routes to the peer network. Defaults to `false`.

* `import_custom_routes` - (Optional)
Whether to import the custom routes from the peer network. Defaults to `false`.

* `export_subnet_routes_with_public_ip` - (Optional)
Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.

* `import_subnet_routes_with_public_ip` - (Optional)
Whether subnet routes with public IP range are imported. The default value is false. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported from peers and are not controlled by this field.

* `stack_type` - (Optional)
Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default value is IPV4_ONLY. Possible values: ["IPV4_ONLY", "IPV4_IPV6"].

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are
exported:

* `id` - an identifier for the resource with format `{{network}}/{{name}}`

* `state` - State for the peering, either `ACTIVE` or `INACTIVE`. The peering is
`ACTIVE` when there's a matching configuration in the peer network.

* `state_details` - Details about the current state of the peering.

## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options: configuration options:

- `create` - Default is 4 minutes.
- `delete` - Default is 4 minutes.

## Import

VPC network peerings can be imported using the name and project of the primary network the peering exists in and the name of the network peering

```
$ terraform import google_compute_network_peering.peering_network project-name/network-name/peering-name
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-3d1d2ad05e7d3d4d16bd8936d8d9cd3eafdbbddd4d04005573b6216637b299c4 -->