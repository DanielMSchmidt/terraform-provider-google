---
subcategory: "Kubernetes (Container) Engine"
description: |-
  Provides lists of available Google Kubernetes Engine versions for masters and nodes.
---


<!-- Please do not edit this file, it is generated. -->
# google\_container\_engine\_versions

Provides access to available Google Kubernetes Engine versions in a zone or region for a given project.

-> If you are using the `google_container_engine_versions` datasource with a
regional cluster, ensure that you have provided a region as the `location` to
the datasource. A region can have a different set of supported versions than
its component zones, and not all zones in a region are guaranteed to
support the same version.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_google_container_engine_versions_central1_b =
        google.data_google_container_engine_versions.DataGoogleContainerEngineVersions(self, "central1b",
            location="us-central1-b",
            provider=google_beta,
            version_prefix="1.12."
        )
        cdktf.TerraformOutput(self, "stable_channel_default_version",
            value=cdktf.property_access(data_google_container_engine_versions_central1_b.release_channel_default_version, ["\"STABLE\""])
        )
        cdktf.TerraformOutput(self, "stable_channel_latest_version",
            value=cdktf.property_access(data_google_container_engine_versions_central1_b.release_channel_latest_version, ["\"STABLE\""])
        )
        google.container_cluster.ContainerCluster(self, "foo",
            initial_node_count=1,
            location="us-central1-b",
            name="terraform-test-cluster",
            node_version=cdktf.Token.as_string(data_google_container_engine_versions_central1_b.latest_node_version)
        )
```

## Argument Reference

The following arguments are supported:

* `location` (Optional) - The location (region or zone) to list versions for.
Must exactly match the location the cluster will be deployed in, or listed
versions may not be available. If `location`, `region`, and `zone` are not
specified, the provider-level zone must be set and is used instead.

* `project` (Optional) - ID of the project to list available cluster versions for. Should match the project the cluster will be deployed to.
  Defaults to the project that the provider is authenticated with.

* `version_prefix` (Optional) - If provided, Terraform will only return versions
that match the string prefix. For example, `1.11.` will match all `1.11` series
releases. Since this is just a string match, it's recommended that you append a
`.` after minor versions to ensure that prefixes such as `1.1` don't match
versions like `1.12.5-gke.10` accidentally. See [the docs on versioning schema](https://cloud.google.com/kubernetes-engine/versioning-and-upgrades#versioning_scheme)
for full details on how version strings are formatted.

## Attributes Reference

The following attributes are exported:

* `valid_master_versions` - A list of versions available in the given zone for use with master instances.
* `valid_node_versions` - A list of versions available in the given zone for use with node instances.
* `latest_master_version` - The latest version available in the given zone for use with master instances.
* `latest_node_version` - The latest version available in the given zone for use with node instances.
* `default_cluster_version` - Version of Kubernetes the service deploys by default.
* `release_channel_default_version` - A map from a release channel name to the channel's default version.
* `release_channel_latest_version` - A map from a release channel name to the channel's latest version.

<!-- cache-key: cdktf-0.17.0-pre.15 input-6b746b7627879c5108d196523001db1c37a733f4d0b86c34af49ff9dde6892b9 -->