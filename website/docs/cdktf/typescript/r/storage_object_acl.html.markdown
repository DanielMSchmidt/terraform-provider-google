---
subcategory: "Cloud Storage"
description: |-
  Creates a new object ACL in Google Cloud Storage.
---


<!-- Please do not edit this file, it is generated. -->
# google\_storage\_object\_acl

Authoritatively manages the access control list (ACL) for an object in a Google
Cloud Storage (GCS) bucket. Removing a `googleStorageObjectAcl` sets the
acl to the `private` [predefined ACL](https://cloud.google.com/storage/docs/access-control#predefined-acl).

For more information see
[the official documentation](https://cloud.google.com/storage/docs/access-control/lists) 
and 
[API](https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls).

-> Want fine-grained control over object ACLs? Use `googleStorageObjectAccessControl` to control individual
role entity pairs.

## Example Usage

Create an object ACL with one owner and one reader.

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const googleStorageBucketImageStore =
      new google.storageBucket.StorageBucket(this, "image-store", {
        location: "EU",
        name: "image-store-bucket",
      });
    const googleStorageBucketObjectImage =
      new google.storageBucketObject.StorageBucketObject(this, "image", {
        bucket: cdktf.Token.asString(googleStorageBucketImageStore.name),
        name: "image1",
        source: "image1.jpg",
      });
    new google.storageObjectAcl.StorageObjectAcl(this, "image-store-acl", {
      bucket: cdktf.Token.asString(googleStorageBucketImageStore.name),
      object: cdktf.Token.asString(googleStorageBucketObjectImage.outputName),
      roleEntity: ["OWNER:user-my.email@gmail.com", "READER:group-mygroup"],
    });
  }
}

```

## Argument Reference

* `bucket` - (Required) The name of the bucket the object is stored in.

* `object` - (Required) The name of the object to apply the acl to.

- - -

* `predefinedAcl` - (Optional) The "canned" [predefined ACL](https://cloud.google.com/storage/docs/access-control#predefined-acl) to apply. Must be set if `roleEntity` is not.

* `roleEntity` - (Optional) List of role/entity pairs in the form `role:entity`. See [GCS Object ACL documentation](https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls) for more details.
Must be set if `predefinedAcl` is not.

-> The object's creator will always have `owner` permissions for their object, and any attempt to modify that permission would return an error. Instead, Terraform automatically
adds that role/entity pair to your `terraform plan` results when it is omitted in your config; `terraform plan` will show the correct final state at every point except for at
`create` time, where the object role/entity pair is omitted if not explicitly set.


## Attributes Reference

Only the arguments listed above are exposed as attributes.

## Import

This resource does not support import.

<!-- cache-key: cdktf-0.17.0-pre.15 input-9bc6048a1f0bd31688b7484dbf93363a16c44c24efbbd6c651eef34db945783b -->