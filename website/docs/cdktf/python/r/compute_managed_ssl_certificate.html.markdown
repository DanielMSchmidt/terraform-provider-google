---

<!-- Please do not edit this file, it is generated. -->
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Compute Engine"
description: |-
  An SslCertificate resource, used for HTTPS load balancing.
---

# google\_compute\_managed\_ssl\_certificate

An SslCertificate resource, used for HTTPS load balancing.  This resource
represents a certificate for which the certificate secrets are created and
managed by Google.

For a resource where you provide the key, see the
SSL Certificate resource.


To get more information about ManagedSslCertificate, see:

* [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/sslCertificates)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/load-balancing/docs/ssl-certificates)

~> **Warning:** This resource should be used with extreme caution!  Provisioning an SSL
certificate is complex.  Ensure that you understand the lifecycle of a
certificate before attempting complex tasks like cert rotation automatically.
This resource will "return" as soon as the certificate object is created,
but post-creation the certificate object will go through a "provisioning"
process.  The provisioning process can complete only when the domain name
for which the certificate is created points to a target pool which, itself,
points at the certificate.  Depending on your DNS provider, this may take
some time, and migrating from self-managed certificates to Google-managed
certificates may entail some downtime while the certificate provisions.

In conclusion: Be extremely cautious.

<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=managed_ssl_certificate_basic&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Managed Ssl Certificate Basic


```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_compute_http_health_check_default =
        google.compute_http_health_check.ComputeHttpHealthCheck(self, "default",
            check_interval_sec=1,
            name="http-health-check",
            request_path="/",
            timeout_sec=1
        )
        google_compute_managed_ssl_certificate_default =
        google.compute_managed_ssl_certificate.ComputeManagedSslCertificate(self, "default_1",
            managed=ComputeManagedSslCertificateManaged(
                domains=["sslcert.tf-test.club."]
            ),
            name="test-cert"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_compute_managed_ssl_certificate_default.override_logical_id("default")
        google_compute_backend_service_default =
        google.compute_backend_service.ComputeBackendService(self, "default_2",
            health_checks=[
                cdktf.Token.as_string(google_compute_http_health_check_default.id)
            ],
            name="backend-service",
            port_name="http",
            protocol="HTTP",
            timeout_sec=10
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_compute_backend_service_default.override_logical_id("default")
        google_compute_url_map_default = google.compute_url_map.ComputeUrlMap(self, "default_3",
            default_service=cdktf.Token.as_string(google_compute_backend_service_default.id),
            description="a description",
            host_rule=[ComputeUrlMapHostRule(
                hosts=["sslcert.tf-test.club"],
                path_matcher="allpaths"
            )
            ],
            name="url-map",
            path_matcher=[ComputeUrlMapPathMatcher(
                default_service=cdktf.Token.as_string(google_compute_backend_service_default.id),
                name="allpaths",
                path_rule=[ComputeUrlMapPathMatcherPathRule(
                    paths=["/*"],
                    service=cdktf.Token.as_string(google_compute_backend_service_default.id)
                )
                ]
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_compute_url_map_default.override_logical_id("default")
        google_compute_target_https_proxy_default =
        google.compute_target_https_proxy.ComputeTargetHttpsProxy(self, "default_4",
            name="test-proxy",
            ssl_certificates=[
                cdktf.Token.as_string(google_compute_managed_ssl_certificate_default.id)
            ],
            url_map=cdktf.Token.as_string(google_compute_url_map_default.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_compute_target_https_proxy_default.override_logical_id("default")
        google_compute_global_forwarding_rule_default =
        google.compute_global_forwarding_rule.ComputeGlobalForwardingRule(self, "default_5",
            name="forwarding-rule",
            port_range=cdktf.Token.as_string(443),
            target=cdktf.Token.as_string(google_compute_target_https_proxy_default.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_compute_global_forwarding_rule_default.override_logical_id("default")
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=managed_ssl_certificate_recreation&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Managed Ssl Certificate Recreation


```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
import ...gen.providers.random as random
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: random.
        #     For a more precise conversion please use the --provider flag in convert.
        managed_domains = cdktf.Fn.tolist(["test.example.com"])
        google_compute_http_health_check_default =
        google.compute_http_health_check.ComputeHttpHealthCheck(self, "default",
            check_interval_sec=1,
            name="http-health-check",
            request_path="/",
            timeout_sec=1
        )
        random_id_certificate = random.id.Id(self, "certificate",
            byte_length=4,
            keepers=[{
                "domains": cdktf.Fn.join(",", cdktf.Token.as_list(managed_domains))
            }
            ],
            prefix="issue6147-cert-"
        )
        google_compute_backend_service_default =
        google.compute_backend_service.ComputeBackendService(self, "default_2",
            health_checks=[
                cdktf.Token.as_string(google_compute_http_health_check_default.id)
            ],
            name="backend-service",
            port_name="http",
            protocol="HTTP",
            timeout_sec=10
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_compute_backend_service_default.override_logical_id("default")
        google_compute_managed_ssl_certificate_cert =
        google.compute_managed_ssl_certificate.ComputeManagedSslCertificate(self, "cert",
            lifecycle=cdktf.TerraformResourceLifecycle(
                create_before_destroy=True
            ),
            managed=ComputeManagedSslCertificateManaged(
                domains=cdktf.Token.as_list(managed_domains)
            ),
            name=cdktf.Token.as_string(random_id_certificate.hex)
        )
        google_compute_url_map_default = google.compute_url_map.ComputeUrlMap(self, "default_4",
            default_service=cdktf.Token.as_string(google_compute_backend_service_default.id),
            description="a description",
            host_rule=[ComputeUrlMapHostRule(
                hosts=["mysite.com"],
                path_matcher="allpaths"
            )
            ],
            name="url-map",
            path_matcher=[ComputeUrlMapPathMatcher(
                default_service=cdktf.Token.as_string(google_compute_backend_service_default.id),
                name="allpaths",
                path_rule=[ComputeUrlMapPathMatcherPathRule(
                    paths=["/*"],
                    service=cdktf.Token.as_string(google_compute_backend_service_default.id)
                )
                ]
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_compute_url_map_default.override_logical_id("default")
        google_compute_target_https_proxy_default =
        google.compute_target_https_proxy.ComputeTargetHttpsProxy(self, "default_5",
            name="test-proxy",
            ssl_certificates=[
                cdktf.Token.as_string(google_compute_managed_ssl_certificate_cert.id)
            ],
            url_map=cdktf.Token.as_string(google_compute_url_map_default.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_compute_target_https_proxy_default.override_logical_id("default")
```

## Argument Reference

The following arguments are supported:



- - -


* `description` -
  (Optional)
  An optional description of this resource.

* `name` -
  (Optional)
  Name of the resource. Provided by the client when the resource is
  created. The name must be 1-63 characters long, and comply with
  RFC1035. Specifically, the name must be 1-63 characters long and match
  the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the
  first character must be a lowercase letter, and all following
  characters must be a dash, lowercase letter, or digit, except the last
  character, which cannot be a dash.

  These are in the same namespace as the managed SSL certificates.

* `managed` -
  (Optional)
  Properties relevant to a managed certificate.  These will be used if the
  certificate is managed (as indicated by a value of `MANAGED` in `type`).
  Structure is [documented below](#nested_managed).

* `type` -
  (Optional)
  Enum field whose value is always `MANAGED` - used to signal to the API
  which type this is.
  Default value is `MANAGED`.
  Possible values are: `MANAGED`.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


<a name="nested_managed"></a>The `managed` block supports:

* `domains` -
  (Required)
  Domains for which a managed SSL certificate will be valid.  Currently,
  there can be up to 100 domains in this list.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/global/sslCertificates/{{name}}`

* `creation_timestamp` -
  Creation timestamp in RFC3339 text format.

* `certificate_id` -
  The unique identifier for the resource.

* `subject_alternative_names` -
  Domains associated with the certificate via Subject Alternative Name.

* `expire_time` -
  Expire time of the certificate in RFC3339 text format.
* `self_link` - The URI of the created resource.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 30 minutes.
- `delete` - Default is 30 minutes.

## Import


ManagedSslCertificate can be imported using any of these accepted formats:

```
$ terraform import google_compute_managed_ssl_certificate.default projects/{{project}}/global/sslCertificates/{{name}}
$ terraform import google_compute_managed_ssl_certificate.default {{project}}/{{name}}
$ terraform import google_compute_managed_ssl_certificate.default {{name}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).

<!-- cache-key: cdktf-0.17.0-pre.15 input-69d6ff387861f0aba922f935a17e0f0b456a683e9c63045b5931e2de6eae205c -->