---

<!-- Please do not edit this file, it is generated. -->
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Firebase Hosting"
description: |-
  A `Version` is a configuration which determine how a site is displayed.
---

# google\_firebase\_hosting\_version

A `Version` is a configuration which determine how a site is displayed. Static files are not supported at the moment.

~> **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
See [Provider Versions](https://terraform.io/docs/providers/google/guides/provider_versions.html) for more details on beta resources.

To get more information about Version, see:

* [API documentation](https://firebase.google.com/docs/reference/hosting/rest/v1beta1/sites.versions)
* How-to Guides
    * [Official Documentation](https://firebase.google.com/docs/hosting)

## Example Usage - Firebasehosting Version Redirect


```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_firebase_hosting_site_default = google.FirebaseHostingSite(self, "default",
            project="my-project-name",
            provider=google_beta,
            site_id="site-id"
        )
        google_firebase_hosting_version_default =
        google.FirebaseHostingVersion(self, "default_1",
            config=[{
                "redirects": [{
                    "glob": "/google/**",
                    "location": "https://www.google.com",
                    "status_code": 302
                }
                ]
            }
            ],
            provider=google_beta,
            site_id=google_firebase_hosting_site_default.site_id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_firebase_hosting_version_default.override_logical_id("default")
        google_firebase_hosting_release_default =
        google.FirebaseHostingRelease(self, "default_2",
            message="Redirect to Google",
            provider=google_beta,
            site_id=google_firebase_hosting_site_default.site_id,
            version_name=google_firebase_hosting_version_default.name
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_firebase_hosting_release_default.override_logical_id("default")
```
## Example Usage - Firebasehosting Version Cloud Run


```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_cloud_run_v2_service_default = google.CloudRunV2Service(self, "default",
            ingress="INGRESS_TRAFFIC_ALL",
            location="us-central1",
            name="cloud-run-service-via-hosting",
            project="my-project-name",
            provider=google_beta,
            template=[{
                "containers": [{
                    "image": "us-docker.pkg.dev/cloudrun/container/hello"
                }
                ]
            }
            ]
        )
        google_firebase_hosting_site_default = google.FirebaseHostingSite(self, "default_1",
            project="my-project-name",
            provider=google_beta,
            site_id="site-id"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_firebase_hosting_site_default.override_logical_id("default")
        google_firebase_hosting_version_default =
        google.FirebaseHostingVersion(self, "default_2",
            config=[{
                "rewrites": [{
                    "glob": "/hello/**",
                    "run": [{
                        "region": google_cloud_run_v2_service_default.location,
                        "service_id": google_cloud_run_v2_service_default.name
                    }
                    ]
                }
                ]
            }
            ],
            provider=google_beta,
            site_id=google_firebase_hosting_site_default.site_id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_firebase_hosting_version_default.override_logical_id("default")
        google_firebase_hosting_release_default =
        google.FirebaseHostingRelease(self, "default_3",
            message="Cloud Run Integration",
            provider=google_beta,
            site_id=google_firebase_hosting_site_default.site_id,
            version_name=google_firebase_hosting_version_default.name
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_firebase_hosting_release_default.override_logical_id("default")
```
## Example Usage - Firebasehosting Version Cloud Functions


```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_firebase_hosting_site_default = google.FirebaseHostingSite(self, "default",
            project="my-project-name",
            provider=google_beta,
            site_id="site-id"
        )
        google_storage_bucket_bucket = google.storage_bucket.StorageBucket(self, "bucket",
            location="US",
            name="site-id-function-source",
            project="my-project-name",
            provider=google_beta,
            uniform_bucket_level_access=True
        )
        google_storage_bucket_object_object =
        google.storage_bucket_object.StorageBucketObject(self, "object",
            bucket=cdktf.Token.as_string(google_storage_bucket_bucket.name),
            name="function-source.zip",
            provider=google_beta,
            source="function-source.zip"
        )
        google_cloudfunctions_function_function =
        google.cloudfunctions_function.CloudfunctionsFunction(self, "function",
            available_memory_mb=128,
            description="A Cloud Function connected to Firebase Hosing",
            entry_point="helloHttp",
            name="cloud-function-via-hosting",
            project="my-project-name",
            provider=google_beta,
            runtime="nodejs16",
            source_archive_bucket=cdktf.Token.as_string(google_storage_bucket_bucket.name),
            source_archive_object=cdktf.Token.as_string(google_storage_bucket_object_object.name),
            trigger_http=True
        )
        google_firebase_hosting_version_default =
        google.FirebaseHostingVersion(self, "default_4",
            config=[{
                "rewrites": [{
                    "function": google_cloudfunctions_function_function.name,
                    "glob": "/hello/**"
                }
                ]
            }
            ],
            provider=google_beta,
            site_id=google_firebase_hosting_site_default.site_id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_firebase_hosting_version_default.override_logical_id("default")
        google_firebase_hosting_release_default =
        google.FirebaseHostingRelease(self, "default_5",
            message="Cloud Functions Integration",
            provider=google_beta,
            site_id=google_firebase_hosting_site_default.site_id,
            version_name=google_firebase_hosting_version_default.name
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_firebase_hosting_release_default.override_logical_id("default")
```

## Argument Reference

The following arguments are supported:


* `site_id` -
  (Required)
  Required. The ID of the site in which to create this Version.


- - -


* `config` -
  (Optional)
  The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
  Structure is [documented below](#nested_config).


<a name="nested_config"></a>The `config` block supports:

* `rewrites` -
  (Optional)
  An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the
  request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
  Structure is [documented below](#nested_rewrites).

* `redirects` -
  (Optional)
  An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path,
  triggers Hosting to respond with a redirect to the specified destination path.
  Structure is [documented below](#nested_redirects).


<a name="nested_rewrites"></a>The `rewrites` block supports:

* `glob` -
  (Optional)
  The user-supplied glob to match against the request URL path.

* `regex` -
  (Optional)
  The user-supplied RE2 regular expression to match against the request URL path.

* `function` -
  (Optional)
  The function to proxy requests to. Must match the exported function name exactly.

* `run` -
  (Optional)
  The request will be forwarded to Cloud Run.
  Structure is [documented below](#nested_run).


<a name="nested_run"></a>The `run` block supports:

* `service_id` -
  (Required)
  User-defined ID of the Cloud Run service.

* `region` -
  (Optional)
  Optional. User-provided region where the Cloud Run service is hosted. Defaults to `us-central1` if not supplied.

<a name="nested_redirects"></a>The `redirects` block supports:

* `glob` -
  (Optional)
  The user-supplied glob to match against the request URL path.

* `regex` -
  (Optional)
  The user-supplied RE2 regular expression to match against the request URL path.

* `status_code` -
  (Required)
  The status HTTP code to return in the response. It must be a valid 3xx status code.

* `location` -
  (Required)
  The value to put in the HTTP location header of the response.
  The location can contain capture group values from the pattern using a : prefix to identify
  the segment and an optional * to capture the rest of the URL. For example:
  ```hcl
  redirects {
    glob = "/:capture*"
    status_code = 302
    location = "https://example.com/foo/:capture"
  }
  ```

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `sites/{{site_id}}/versions/{{version_id}}`

* `name` -
  The fully-qualified resource name for the version, in the format:
  sites/SITE_ID/versions/VERSION_ID

* `version_id` -
  The ID for the version as in sites/SITE_ID/versions/VERSION_ID


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


Version can be imported using any of these accepted formats:

```
$ terraform import google_firebase_hosting_version.default sites/{{site_id}}/versions/{{version_id}}
$ terraform import google_firebase_hosting_version.default {{site_id}}/{{version_id}}
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-f8e9ed3126844073dd386682174b1cd640e423e11eed3967f1087d2ca622544b -->