---

<!-- Please do not edit this file, it is generated. -->
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Dataproc metastore"
description: |-
  A managed metastore federation.
---

# google\_dataproc\_metastore\_federation

A managed metastore federation.

~> **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
See [Provider Versions](https://terraform.io/docs/providers/google/guides/provider_versions.html) for more details on beta resources.


## Example Usage - Dataproc Metastore Federation Basic


```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_dataproc_metastore_service_default =
        google.DataprocMetastoreService(self, "default",
            hive_metastore_config=[{
                "endpoint_protocol": "GRPC",
                "version": "3.1.2"
            }
            ],
            location="us-central1",
            provider=google_beta,
            service_id="",
            tier="DEVELOPER"
        )
        google_dataproc_metastore_federation_default =
        google.DataprocMetastoreFederation(self, "default_1",
            backend_metastores=[{
                "metastore_type": "DATAPROC_METASTORE",
                "name": google_dataproc_metastore_service_default.id,
                "rank": "1"
            }
            ],
            federation_id="",
            location="us-central1",
            provider=google_beta,
            version="3.1.2"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_dataproc_metastore_federation_default.override_logical_id("default")
```
## Example Usage - Dataproc Metastore Federation Bigquery


```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_dataproc_metastore_service_default =
        google.DataprocMetastoreService(self, "default",
            hive_metastore_config=[{
                "endpoint_protocol": "GRPC",
                "version": "3.1.2"
            }
            ],
            location="us-central1",
            provider=google_beta,
            service_id="",
            tier="DEVELOPER"
        )
        data_google_project_project =
        google.data_google_project.DataGoogleProject(self, "project",
            provider=google_beta
        )
        google_dataproc_metastore_federation_default =
        google.DataprocMetastoreFederation(self, "default_2",
            backend_metastores=[{
                "metastore_type": "BIGQUERY",
                "name": data_google_project_project.id,
                "rank": "2"
            }, {
                "metastore_type": "DATAPROC_METASTORE",
                "name": google_dataproc_metastore_service_default.id,
                "rank": "1"
            }
            ],
            federation_id="",
            location="us-central1",
            provider=google_beta,
            version="3.1.2"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_dataproc_metastore_federation_default.override_logical_id("default")
```

## Argument Reference

The following arguments are supported:


* `version` -
  (Required)
  The Apache Hive metastore version of the federation. All backend metastore versions must be compatible with the federation version.

* `backend_metastores` -
  (Required)
  A map from BackendMetastore rank to BackendMetastores from which the federation service serves metadata at query time. The map key represents the order in which BackendMetastores should be evaluated to resolve database names at query time and should be greater than or equal to zero. A BackendMetastore with a lower number will be evaluated before a BackendMetastore with a higher number.
  Structure is [documented below](#nested_backend_metastores).

* `federation_id` -
  (Required)
  The ID of the metastore federation. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
  and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
  3 and 63 characters.


<a name="nested_backend_metastores"></a>The `backend_metastores` block supports:

* `rank` - (Required) The identifier for this object. Format specified above.

* `name` -
  (Required)
  The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: Dataplex: projects/{projectId}/locations/{location}/lakes/{lake_id} BigQuery: projects/{projectId} Dataproc Metastore: projects/{projectId}/locations/{location}/services/{serviceId}

* `metastore_type` -
  (Required)
  The type of the backend metastore.
  Possible values are: `METASTORE_TYPE_UNSPECIFIED`, `DATAPROC_METASTORE`, `BIGQUERY`.

- - -


* `labels` -
  (Optional)
  User-defined labels for the metastore federation.

* `location` -
  (Optional)
  The location where the metastore federation should reside.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/federations/{{federation_id}}`

* `name` -
  The relative resource name of the metastore federation.

* `endpoint_uri` -
  The URI of the endpoint used to access the metastore federation.

* `state` -
  The current state of the metastore federation.

* `state_message` -
  Additional information about the current state of the metastore federation, if available.

* `uid` -
  The globally unique resource identifier of the metastore federation.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


Federation can be imported using any of these accepted formats:

```
$ terraform import google_dataproc_metastore_federation.default projects/{{project}}/locations/{{location}}/federations/{{federation_id}}
$ terraform import google_dataproc_metastore_federation.default {{project}}/{{location}}/{{federation_id}}
$ terraform import google_dataproc_metastore_federation.default {{location}}/{{federation_id}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).

<!-- cache-key: cdktf-0.17.0-pre.15 input-feb68d6473dcc9e3b93be1e2958f5f2e9b6ca360f4031e3f155686c872c37834 -->