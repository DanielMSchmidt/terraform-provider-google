---

<!-- Please do not edit this file, it is generated. -->
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Compute Engine"
description: |-
  Represents a VPN gateway managed outside of GCP.
---

# google\_compute\_external\_vpn\_gateway

Represents a VPN gateway managed outside of GCP.


To get more information about ExternalVpnGateway, see:

* [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/externalVpnGateways)

<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=external_vpn_gateway&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - External Vpn Gateway


```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_compute_external_vpn_gateway_external_gateway =
        google.compute_external_vpn_gateway.ComputeExternalVpnGateway(self, "external_gateway",
            description="An externally managed VPN gateway",
            interface=[ComputeExternalVpnGatewayInterface(
                id=0,
                ip_address="8.8.8.8"
            )
            ],
            name="external-gateway",
            redundancy_type="SINGLE_IP_INTERNALLY_REDUNDANT"
        )
        google_compute_network_network =
        google.compute_network.ComputeNetwork(self, "network",
            auto_create_subnetworks=False,
            name="network-1",
            routing_mode="GLOBAL"
        )
        google_compute_router_router1 = google.compute_router.ComputeRouter(self, "router1",
            bgp=ComputeRouterBgp(
                asn=64514
            ),
            name="ha-vpn-router1",
            network=cdktf.Token.as_string(google_compute_network_network.name)
        )
        google.compute_subnetwork.ComputeSubnetwork(self, "network_subnet1",
            ip_cidr_range="10.0.1.0/24",
            name="ha-vpn-subnet-1",
            network=cdktf.Token.as_string(google_compute_network_network.id),
            region="us-central1"
        )
        google.compute_subnetwork.ComputeSubnetwork(self, "network_subnet2",
            ip_cidr_range="10.0.2.0/24",
            name="ha-vpn-subnet-2",
            network=cdktf.Token.as_string(google_compute_network_network.id),
            region="us-west1"
        )
        google_compute_ha_vpn_gateway_ha_gateway =
        google.compute_ha_vpn_gateway.ComputeHaVpnGateway(self, "ha_gateway",
            name="ha-vpn",
            network=cdktf.Token.as_string(google_compute_network_network.id),
            region="us-central1"
        )
        google_compute_vpn_tunnel_tunnel1 =
        google.compute_vpn_tunnel.ComputeVpnTunnel(self, "tunnel1",
            name="ha-vpn-tunnel1",
            peer_external_gateway=cdktf.Token.as_string(google_compute_external_vpn_gateway_external_gateway.id),
            peer_external_gateway_interface=0,
            region="us-central1",
            router=cdktf.Token.as_string(google_compute_router_router1.id),
            shared_secret="a secret message",
            vpn_gateway=cdktf.Token.as_string(google_compute_ha_vpn_gateway_ha_gateway.id),
            vpn_gateway_interface=0
        )
        google_compute_vpn_tunnel_tunnel2 =
        google.compute_vpn_tunnel.ComputeVpnTunnel(self, "tunnel2",
            name="ha-vpn-tunnel2",
            peer_external_gateway=cdktf.Token.as_string(google_compute_external_vpn_gateway_external_gateway.id),
            peer_external_gateway_interface=0,
            region="us-central1",
            router=" ${" + google_compute_router_router1.id + "}",
            shared_secret="a secret message",
            vpn_gateway=cdktf.Token.as_string(google_compute_ha_vpn_gateway_ha_gateway.id),
            vpn_gateway_interface=1
        )
        google_compute_router_interface_router1_interface1 =
        google.compute_router_interface.ComputeRouterInterface(self, "router1_interface1",
            ip_range="169.254.0.1/30",
            name="router1-interface1",
            region="us-central1",
            router=cdktf.Token.as_string(google_compute_router_router1.name),
            vpn_tunnel=cdktf.Token.as_string(google_compute_vpn_tunnel_tunnel1.name)
        )
        google_compute_router_interface_router1_interface2 =
        google.compute_router_interface.ComputeRouterInterface(self, "router1_interface2",
            ip_range="169.254.1.1/30",
            name="router1-interface2",
            region="us-central1",
            router=cdktf.Token.as_string(google_compute_router_router1.name),
            vpn_tunnel=cdktf.Token.as_string(google_compute_vpn_tunnel_tunnel2.name)
        )
        google.compute_router_peer.ComputeRouterPeer(self, "router1_peer1",
            advertised_route_priority=100,
            interface=cdktf.Token.as_string(google_compute_router_interface_router1_interface1.name),
            name="router1-peer1",
            peer_asn=64515,
            peer_ip_address="169.254.0.2",
            region="us-central1",
            router=cdktf.Token.as_string(google_compute_router_router1.name)
        )
        google.compute_router_peer.ComputeRouterPeer(self, "router1_peer2",
            advertised_route_priority=100,
            interface=cdktf.Token.as_string(google_compute_router_interface_router1_interface2.name),
            name="router1-peer2",
            peer_asn=64515,
            peer_ip_address="169.254.1.2",
            region="us-central1",
            router=cdktf.Token.as_string(google_compute_router_router1.name)
        )
```

## Argument Reference

The following arguments are supported:


* `name` -
  (Required)
  Name of the resource. Provided by the client when the resource is
  created. The name must be 1-63 characters long, and comply with
  RFC1035.  Specifically, the name must be 1-63 characters long and
  match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means
  the first character must be a lowercase letter, and all following
  characters must be a dash, lowercase letter, or digit, except the last
  character, which cannot be a dash.


- - -


* `description` -
  (Optional)
  An optional description of this resource.

* `labels` -
  (Optional)
  Labels for the external VPN gateway resource.

* `redundancy_type` -
  (Optional)
  Indicates the redundancy type of this external VPN gateway
  Possible values are: `FOUR_IPS_REDUNDANCY`, `SINGLE_IP_INTERNALLY_REDUNDANT`, `TWO_IPS_REDUNDANCY`.

* `interface` -
  (Optional)
  A list of interfaces on this external VPN gateway.
  Structure is [documented below](#nested_interface).

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


<a name="nested_interface"></a>The `interface` block supports:

* `id` -
  (Optional)
  The numeric ID for this interface. Allowed values are based on the redundancy type
  of this external VPN gateway
  * `0 - SINGLE_IP_INTERNALLY_REDUNDANT`
  * `0, 1 - TWO_IPS_REDUNDANCY`
  * `0, 1, 2, 3 - FOUR_IPS_REDUNDANCY`

* `ip_address` -
  (Optional)
  IP address of the interface in the external VPN gateway.
  Only IPv4 is supported. This IP address can be either from
  your on-premise gateway or another Cloud provider's VPN gateway,
  it cannot be an IP address from Google Compute Engine.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/global/externalVpnGateways/{{name}}`
* `self_link` - The URI of the created resource.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


ExternalVpnGateway can be imported using any of these accepted formats:

```
$ terraform import google_compute_external_vpn_gateway.default projects/{{project}}/global/externalVpnGateways/{{name}}
$ terraform import google_compute_external_vpn_gateway.default {{project}}/{{name}}
$ terraform import google_compute_external_vpn_gateway.default {{name}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).

<!-- cache-key: cdktf-0.17.0-pre.15 input-2679a4902556c7da548fef54ea774f75b0c43529b31fc9dc4672e0e2b75fc9b5 -->