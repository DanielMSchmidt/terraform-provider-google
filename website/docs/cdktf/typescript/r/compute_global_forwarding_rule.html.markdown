---

<!-- Please do not edit this file, it is generated. -->
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Compute Engine"
description: |-
  Represents a GlobalForwardingRule resource.
---

# google\_compute\_global\_forwarding\_rule

Represents a GlobalForwardingRule resource. Global forwarding rules are
used to forward traffic to the correct load balancer for HTTP load
balancing. Global forwarding rules can only be used for HTTP load
balancing.

For more information, see
https://cloud.google.com/compute/docs/load-balancing/http/



## Example Usage - External Ssl Proxy Lb Mig Backend


```hcl
# External SSL proxy load balancer with managed instance group backend

# VPC
resource "google_compute_network" "default" {
  name                    = "ssl-proxy-xlb-network"
  provider                = google
  auto_create_subnetworks = false
}

# backend subnet
resource "google_compute_subnetwork" "default" {
  name          = "ssl-proxy-xlb-subnet"
  provider      = google
  ip_cidr_range = "10.0.1.0/24"
  region        = "us-central1"
  network       = google_compute_network.default.id
}

# reserved IP address
resource "google_compute_global_address" "default" {
  name = "ssl-proxy-xlb-ip"
}


# Self-signed regional SSL certificate for testing
resource "tls_private_key" "default" {
  algorithm = "RSA"
  rsa_bits  = 2048
}

resource "tls_self_signed_cert" "default" {
  key_algorithm   = tls_private_key.default.algorithm
  private_key_pem = tls_private_key.default.private_key_pem

  # Certificate expires after 12 hours.
  validity_period_hours = 12

  # Generate a new certificate if Terraform is run within three
  # hours of the certificate's expiration time.
  early_renewal_hours = 3

  # Reasonable set of uses for a server SSL certificate.
  allowed_uses = [
    "key_encipherment",
    "digital_signature",
    "server_auth",
  ]

  dns_names = ["example.com"]

  subject {
    common_name  = "example.com"
    organization = "ACME Examples, Inc"
  }
}

resource "google_compute_ssl_certificate" "default" {
  name        = "default-cert"
  private_key = tls_private_key.default.private_key_pem
  certificate = tls_self_signed_cert.default.cert_pem
}

resource "google_compute_target_ssl_proxy" "default" {
  name             = "test-proxy"
  backend_service  = google_compute_backend_service.default.id
  ssl_certificates = [google_compute_ssl_certificate.default.id]
}



# forwarding rule
resource "google_compute_global_forwarding_rule" "default" {
  name                  = "ssl-proxy-xlb-forwarding-rule"
  provider              = google
  ip_protocol           = "TCP"
  load_balancing_scheme = "EXTERNAL"
  port_range            = "443"
  target                = google_compute_target_ssl_proxy.default.id
  ip_address            = google_compute_global_address.default.id
}


# backend service
resource "google_compute_backend_service" "default" {
  name                  = "ssl-proxy-xlb-backend-service"
  protocol              = "SSL"
  port_name             = "tcp"
  load_balancing_scheme = "EXTERNAL"
  timeout_sec           = 10
  health_checks         = [google_compute_health_check.default.id]
  backend {
    group           = google_compute_instance_group_manager.default.instance_group
    balancing_mode  = "UTILIZATION"
    max_utilization = 1.0
    capacity_scaler = 1.0
  }
}

resource "google_compute_health_check" "default" {
  name               = "ssl-proxy-health-check"
  timeout_sec        = 1
  check_interval_sec = 1
  tcp_health_check {
    port = "443"
  }
}

# instance template
resource "google_compute_instance_template" "default" {
  name         = "ssl-proxy-xlb-mig-template"
  provider     = google
  machine_type = "e2-small"
  tags         = ["allow-health-check"]

  network_interface {
    network    = google_compute_network.default.id
    subnetwork = google_compute_subnetwork.default.id
    access_config {
      # add external ip to fetch packages
    }
  }
  disk {
    source_image = "debian-cloud/debian-10"
    auto_delete  = true
    boot         = true
  }

  # install nginx and serve a simple web page
  metadata = {
    startup-script = <<-EOF1
      #! /bin/bash
      set -euo pipefail
      export DEBIAN_FRONTEND=noninteractive
      sudo apt-get update
      sudo apt-get install  -y apache2 jq
      sudo a2ensite default-ssl
      sudo a2enmod ssl
      sudo service apache2 restart
      NAME=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/hostname")
      IP=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip")
      METADATA=$(curl -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True" | jq 'del(.["startup-script"])')
      cat <<EOF > /var/www/html/index.html
      <h1>SSL Load Balancer</h1>
      <pre>
      Name: $NAME
      IP: $IP
      Metadata: $METADATA
      </pre>
      EOF
    EOF1
  }
  lifecycle {
    create_before_destroy = true
  }
}

# MIG
resource "google_compute_instance_group_manager" "default" {
  name     = "ssl-proxy-xlb-mig1"
  provider = google
  zone     = "us-central1-c"
  named_port {
    name = "tcp"
    port = 443
  }
  version {
    instance_template = google_compute_instance_template.default.id
    name              = "primary"
  }
  base_instance_name = "vm"
  target_size        = 2
}

# allow access from health check ranges
resource "google_compute_firewall" "default" {
  name          = "ssl-proxy-xlb-fw-allow-hc"
  provider      = google
  direction     = "INGRESS"
  network       = google_compute_network.default.id
  source_ranges = ["130.211.0.0/22", "35.191.0.0/16"]
  allow {
    protocol = "tcp"
  }
  target_tags = ["allow-health-check"]
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=external_tcp_proxy_lb_mig_backend&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - External Tcp Proxy Lb Mig Backend


```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const googleComputeGlobalAddressDefault =
      new google.computeGlobalAddress.ComputeGlobalAddress(this, "default", {
        name: "tcp-proxy-xlb-ip",
        provider: googleBeta,
      });
    const googleComputeHealthCheckDefault =
      new google.computeHealthCheck.ComputeHealthCheck(this, "default_1", {
        checkIntervalSec: 1,
        name: "tcp-proxy-health-check",
        provider: googleBeta,
        tcpHealthCheck: {
          port: cdktf.Token.asNumber("80"),
        },
        timeoutSec: 1,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeHealthCheckDefault.overrideLogicalId("default");
    const googleComputeNetworkDefault =
      new google.computeNetwork.ComputeNetwork(this, "default_2", {
        autoCreateSubnetworks: false,
        name: "tcp-proxy-xlb-network",
        provider: googleBeta,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeNetworkDefault.overrideLogicalId("default");
    const googleComputeSubnetworkDefault =
      new google.computeSubnetwork.ComputeSubnetwork(this, "default_3", {
        ipCidrRange: "10.0.1.0/24",
        name: "tcp-proxy-xlb-subnet",
        network: cdktf.Token.asString(googleComputeNetworkDefault.id),
        provider: googleBeta,
        region: "us-central1",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeSubnetworkDefault.overrideLogicalId("default");
    const googleComputeFirewallDefault =
      new google.computeFirewall.ComputeFirewall(this, "default_4", {
        allow: [
          {
            protocol: "tcp",
          },
        ],
        direction: "INGRESS",
        name: "tcp-proxy-xlb-fw-allow-hc",
        network: cdktf.Token.asString(googleComputeNetworkDefault.id),
        provider: googleBeta,
        sourceRanges: ["130.211.0.0/22", "35.191.0.0/16"],
        targetTags: ["allow-health-check"],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeFirewallDefault.overrideLogicalId("default");
    const googleComputeInstanceTemplateDefault =
      new google.computeInstanceTemplate.ComputeInstanceTemplate(
        this,
        "default_5",
        {
          disk: [
            {
              autoDelete: true,
              boot: true,
              sourceImage: "debian-cloud/debian-10",
            },
          ],
          lifecycle: {
            createBeforeDestroy: true,
          },
          machineType: "e2-small",
          metadata: {
            "startup-script":
              '#! /bin/bash\nset -euo pipefail\nexport DEBIAN_FRONTEND=noninteractive\napt-get update\napt-get install -y nginx-light jq\nNAME=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/hostname")\nIP=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip")\nMETADATA=$(curl -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True" | jq \'del(.["startup-script"])\')\ncat <<EOF > /var/www/html/index.html\n<pre>\nName: $NAME\nIP: $IP\nMetadata: $METADATA\n</pre>\nEOF\n',
          },
          name: "tcp-proxy-xlb-mig-template",
          networkInterface: [
            {
              accessConfig: [{}],
              network: cdktf.Token.asString(googleComputeNetworkDefault.id),
              subnetwork: cdktf.Token.asString(
                googleComputeSubnetworkDefault.id
              ),
            },
          ],
          provider: googleBeta,
          tags: ["allow-health-check"],
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeInstanceTemplateDefault.overrideLogicalId("default");
    const googleComputeInstanceGroupManagerDefault =
      new google.computeInstanceGroupManager.ComputeInstanceGroupManager(
        this,
        "default_6",
        {
          baseInstanceName: "vm",
          name: "tcp-proxy-xlb-mig1",
          namedPort: [
            {
              name: "tcp",
              port: 80,
            },
          ],
          provider: googleBeta,
          targetSize: 2,
          version: [
            {
              instanceTemplate: cdktf.Token.asString(
                googleComputeInstanceTemplateDefault.id
              ),
              name: "primary",
            },
          ],
          zone: "us-central1-c",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeInstanceGroupManagerDefault.overrideLogicalId("default");
    const googleComputeBackendServiceDefault =
      new google.computeBackendService.ComputeBackendService(
        this,
        "default_7",
        {
          backend: [
            {
              balancingMode: "UTILIZATION",
              capacityScaler: 1,
              group: cdktf.Token.asString(
                googleComputeInstanceGroupManagerDefault.instanceGroup
              ),
              maxUtilization: 1,
            },
          ],
          healthChecks: [
            cdktf.Token.asString(googleComputeHealthCheckDefault.id),
          ],
          loadBalancingScheme: "EXTERNAL",
          name: "tcp-proxy-xlb-backend-service",
          portName: "tcp",
          protocol: "TCP",
          provider: googleBeta,
          timeoutSec: 10,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeBackendServiceDefault.overrideLogicalId("default");
    const googleComputeTargetTcpProxyDefault =
      new google.computeTargetTcpProxy.ComputeTargetTcpProxy(
        this,
        "default_8",
        {
          backendService: cdktf.Token.asString(
            googleComputeBackendServiceDefault.id
          ),
          name: "test-proxy-health-check",
          provider: googleBeta,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeTargetTcpProxyDefault.overrideLogicalId("default");
    const googleComputeGlobalForwardingRuleDefault =
      new google.computeGlobalForwardingRule.ComputeGlobalForwardingRule(
        this,
        "default_9",
        {
          ipAddress: cdktf.Token.asString(googleComputeGlobalAddressDefault.id),
          ipProtocol: "TCP",
          loadBalancingScheme: "EXTERNAL",
          name: "tcp-proxy-xlb-forwarding-rule",
          portRange: "110",
          provider: googleBeta,
          target: cdktf.Token.asString(googleComputeTargetTcpProxyDefault.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeGlobalForwardingRuleDefault.overrideLogicalId("default");
  }
}

```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=external_http_lb_mig_backend_custom_header&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - External Http Lb Mig Backend Custom Header


```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const googleComputeGlobalAddressDefault =
      new google.computeGlobalAddress.ComputeGlobalAddress(this, "default", {
        name: "l7-xlb-static-ip",
        provider: googleBeta,
      });
    const googleComputeHealthCheckDefault =
      new google.computeHealthCheck.ComputeHealthCheck(this, "default_1", {
        httpHealthCheck: {
          portSpecification: "USE_SERVING_PORT",
        },
        name: "l7-xlb-hc",
        provider: googleBeta,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeHealthCheckDefault.overrideLogicalId("default");
    const googleComputeNetworkDefault =
      new google.computeNetwork.ComputeNetwork(this, "default_2", {
        autoCreateSubnetworks: false,
        name: "l7-xlb-network",
        provider: googleBeta,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeNetworkDefault.overrideLogicalId("default");
    const googleComputeSubnetworkDefault =
      new google.computeSubnetwork.ComputeSubnetwork(this, "default_3", {
        ipCidrRange: "10.0.1.0/24",
        name: "l7-xlb-subnet",
        network: cdktf.Token.asString(googleComputeNetworkDefault.id),
        provider: googleBeta,
        region: "us-central1",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeSubnetworkDefault.overrideLogicalId("default");
    const googleComputeFirewallDefault =
      new google.computeFirewall.ComputeFirewall(this, "default_4", {
        allow: [
          {
            protocol: "tcp",
          },
        ],
        direction: "INGRESS",
        name: "l7-xlb-fw-allow-hc",
        network: cdktf.Token.asString(googleComputeNetworkDefault.id),
        provider: googleBeta,
        sourceRanges: ["130.211.0.0/22", "35.191.0.0/16"],
        targetTags: ["allow-health-check"],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeFirewallDefault.overrideLogicalId("default");
    const googleComputeInstanceTemplateDefault =
      new google.computeInstanceTemplate.ComputeInstanceTemplate(
        this,
        "default_5",
        {
          disk: [
            {
              autoDelete: true,
              boot: true,
              sourceImage: "debian-cloud/debian-10",
            },
          ],
          lifecycle: {
            createBeforeDestroy: true,
          },
          machineType: "e2-small",
          metadata: {
            "startup-script":
              '#! /bin/bash\nset -euo pipefail\n\nexport DEBIAN_FRONTEND=noninteractive\napt-get update\napt-get install -y nginx-light jq\n\nNAME=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/hostname")\nIP=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip")\nMETADATA=$(curl -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True" | jq \'del(.["startup-script"])\')\n\ncat <<EOF > /var/www/html/index.html\n<pre>\nName: $NAME\nIP: $IP\nMetadata: $METADATA\n</pre>\nEOF\n',
          },
          name: "l7-xlb-mig-template",
          networkInterface: [
            {
              accessConfig: [{}],
              network: cdktf.Token.asString(googleComputeNetworkDefault.id),
              subnetwork: cdktf.Token.asString(
                googleComputeSubnetworkDefault.id
              ),
            },
          ],
          provider: googleBeta,
          tags: ["allow-health-check"],
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeInstanceTemplateDefault.overrideLogicalId("default");
    const googleComputeInstanceGroupManagerDefault =
      new google.computeInstanceGroupManager.ComputeInstanceGroupManager(
        this,
        "default_6",
        {
          baseInstanceName: "vm",
          name: "l7-xlb-mig1",
          namedPort: [
            {
              name: "http",
              port: 8080,
            },
          ],
          provider: googleBeta,
          targetSize: 2,
          version: [
            {
              instanceTemplate: cdktf.Token.asString(
                googleComputeInstanceTemplateDefault.id
              ),
              name: "primary",
            },
          ],
          zone: "us-central1-c",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeInstanceGroupManagerDefault.overrideLogicalId("default");
    const googleComputeBackendServiceDefault =
      new google.computeBackendService.ComputeBackendService(
        this,
        "default_7",
        {
          backend: [
            {
              balancingMode: "UTILIZATION",
              capacityScaler: 1,
              group: cdktf.Token.asString(
                googleComputeInstanceGroupManagerDefault.instanceGroup
              ),
            },
          ],
          customRequestHeaders: [
            "X-Client-Geo-Location: {client_region_subdivision}, {client_city}",
          ],
          custom_response_headers: ["X-Cache-Hit: {cdn_cache_status}"],
          enableCdn: true,
          healthChecks: [
            cdktf.Token.asString(googleComputeHealthCheckDefault.id),
          ],
          loadBalancingScheme: "EXTERNAL",
          name: "l7-xlb-backend-service",
          portName: "my-port",
          protocol: "HTTP",
          provider: googleBeta,
          timeoutSec: 10,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeBackendServiceDefault.overrideLogicalId("default");
    const googleComputeUrlMapDefault = new google.computeUrlMap.ComputeUrlMap(
      this,
      "default_8",
      {
        defaultService: cdktf.Token.asString(
          googleComputeBackendServiceDefault.id
        ),
        name: "l7-xlb-url-map",
        provider: googleBeta,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeUrlMapDefault.overrideLogicalId("default");
    const googleComputeTargetHttpProxyDefault =
      new google.computeTargetHttpProxy.ComputeTargetHttpProxy(
        this,
        "default_9",
        {
          name: "l7-xlb-target-http-proxy",
          provider: googleBeta,
          urlMap: cdktf.Token.asString(googleComputeUrlMapDefault.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeTargetHttpProxyDefault.overrideLogicalId("default");
    const googleComputeGlobalForwardingRuleDefault =
      new google.computeGlobalForwardingRule.ComputeGlobalForwardingRule(
        this,
        "default_10",
        {
          ipAddress: cdktf.Token.asString(googleComputeGlobalAddressDefault.id),
          ipProtocol: "TCP",
          loadBalancingScheme: "EXTERNAL",
          name: "l7-xlb-forwarding-rule",
          portRange: "80",
          provider: googleBeta,
          target: cdktf.Token.asString(googleComputeTargetHttpProxyDefault.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeGlobalForwardingRuleDefault.overrideLogicalId("default");
  }
}

```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=global_forwarding_rule_http&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Global Forwarding Rule Http


```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const googleComputeHttpHealthCheckDefault =
      new google.computeHttpHealthCheck.ComputeHttpHealthCheck(
        this,
        "default",
        {
          checkIntervalSec: 1,
          name: "check-backend",
          requestPath: "/",
          timeoutSec: 1,
        }
      );
    const googleComputeBackendServiceDefault =
      new google.computeBackendService.ComputeBackendService(
        this,
        "default_1",
        {
          healthChecks: [
            cdktf.Token.asString(googleComputeHttpHealthCheckDefault.id),
          ],
          name: "backend",
          portName: "http",
          protocol: "HTTP",
          timeoutSec: 10,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeBackendServiceDefault.overrideLogicalId("default");
    const googleComputeUrlMapDefault = new google.computeUrlMap.ComputeUrlMap(
      this,
      "default_2",
      {
        defaultService: cdktf.Token.asString(
          googleComputeBackendServiceDefault.id
        ),
        description: "a description",
        hostRule: [
          {
            hosts: ["mysite.com"],
            pathMatcher: "allpaths",
          },
        ],
        name: "url-map-target-proxy",
        pathMatcher: [
          {
            defaultService: cdktf.Token.asString(
              googleComputeBackendServiceDefault.id
            ),
            name: "allpaths",
            pathRule: [
              {
                paths: ["/*"],
                service: cdktf.Token.asString(
                  googleComputeBackendServiceDefault.id
                ),
              },
            ],
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeUrlMapDefault.overrideLogicalId("default");
    const googleComputeTargetHttpProxyDefault =
      new google.computeTargetHttpProxy.ComputeTargetHttpProxy(
        this,
        "default_3",
        {
          description: "a description",
          name: "target-proxy",
          urlMap: cdktf.Token.asString(googleComputeUrlMapDefault.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeTargetHttpProxyDefault.overrideLogicalId("default");
    const googleComputeGlobalForwardingRuleDefault =
      new google.computeGlobalForwardingRule.ComputeGlobalForwardingRule(
        this,
        "default_4",
        {
          name: "global-rule",
          portRange: "80",
          target: cdktf.Token.asString(googleComputeTargetHttpProxyDefault.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeGlobalForwardingRuleDefault.overrideLogicalId("default");
  }
}

```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=global_forwarding_rule_internal&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Global Forwarding Rule Internal


```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const googleComputeHealthCheckDefault =
      new google.computeHealthCheck.ComputeHealthCheck(this, "default", {
        checkIntervalSec: 1,
        name: "check-backend",
        provider: googleBeta,
        tcpHealthCheck: {
          port: cdktf.Token.asNumber("80"),
        },
        timeoutSec: 1,
      });
    const dataGoogleComputeImageDebianImage =
      new google.dataGoogleComputeImage.DataGoogleComputeImage(
        this,
        "debian_image",
        {
          family: "debian-11",
          project: "debian-cloud",
          provider: googleBeta,
        }
      );
    const googleComputeInstanceTemplateInstanceTemplate =
      new google.computeInstanceTemplate.ComputeInstanceTemplate(
        this,
        "instance_template",
        {
          disk: [
            {
              autoDelete: true,
              boot: true,
              sourceImage: cdktf.Token.asString(
                dataGoogleComputeImageDebianImage.selfLink
              ),
            },
          ],
          machineType: "e2-medium",
          name: "template-backend",
          networkInterface: [
            {
              network: "default",
            },
          ],
          provider: googleBeta,
        }
      );
    const googleComputeInstanceGroupManagerIgm =
      new google.computeInstanceGroupManager.ComputeInstanceGroupManager(
        this,
        "igm",
        {
          baseInstanceName: "internal-glb",
          name: "igm-internal",
          provider: googleBeta,
          targetSize: 1,
          version: [
            {
              instanceTemplate: cdktf.Token.asString(
                googleComputeInstanceTemplateInstanceTemplate.id
              ),
              name: "primary",
            },
          ],
          zone: "us-central1-f",
        }
      );
    const googleComputeBackendServiceDefault =
      new google.computeBackendService.ComputeBackendService(
        this,
        "default_4",
        {
          backend: [
            {
              balancingMode: "RATE",
              capacityScaler: 0.4,
              group: cdktf.Token.asString(
                googleComputeInstanceGroupManagerIgm.instanceGroup
              ),
              maxRatePerInstance: 50,
            },
          ],
          healthChecks: [
            cdktf.Token.asString(googleComputeHealthCheckDefault.id),
          ],
          loadBalancingScheme: "INTERNAL_SELF_MANAGED",
          name: "backend",
          portName: "http",
          protocol: "HTTP",
          provider: googleBeta,
          timeoutSec: 10,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeBackendServiceDefault.overrideLogicalId("default");
    const googleComputeUrlMapDefault = new google.computeUrlMap.ComputeUrlMap(
      this,
      "default_5",
      {
        defaultService: cdktf.Token.asString(
          googleComputeBackendServiceDefault.id
        ),
        description: "a description",
        hostRule: [
          {
            hosts: ["mysite.com"],
            pathMatcher: "allpaths",
          },
        ],
        name: "url-map-target-proxy",
        pathMatcher: [
          {
            defaultService: cdktf.Token.asString(
              googleComputeBackendServiceDefault.id
            ),
            name: "allpaths",
            pathRule: [
              {
                paths: ["/*"],
                service: cdktf.Token.asString(
                  googleComputeBackendServiceDefault.id
                ),
              },
            ],
          },
        ],
        provider: googleBeta,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeUrlMapDefault.overrideLogicalId("default");
    const googleComputeTargetHttpProxyDefault =
      new google.computeTargetHttpProxy.ComputeTargetHttpProxy(
        this,
        "default_6",
        {
          description: "a description",
          name: "target-proxy",
          provider: googleBeta,
          urlMap: cdktf.Token.asString(googleComputeUrlMapDefault.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeTargetHttpProxyDefault.overrideLogicalId("default");
    const googleComputeGlobalForwardingRuleDefault =
      new google.computeGlobalForwardingRule.ComputeGlobalForwardingRule(
        this,
        "default_7",
        {
          ipAddress: "0.0.0.0",
          loadBalancingScheme: "INTERNAL_SELF_MANAGED",
          metadataFilters: [
            {
              filterLabels: [
                {
                  name: "PLANET",
                  value: "MARS",
                },
              ],
              filterMatchCriteria: "MATCH_ANY",
            },
          ],
          name: "global-rule",
          portRange: "80",
          provider: googleBeta,
          target: cdktf.Token.asString(googleComputeTargetHttpProxyDefault.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeGlobalForwardingRuleDefault.overrideLogicalId("default");
  }
}

```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=global_forwarding_rule_external_managed&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Global Forwarding Rule External Managed


```hcl
resource "google_compute_global_forwarding_rule" "default" {
  name                  = "global-rule"
  target                = google_compute_target_http_proxy.default.id
  port_range            = "80"
  load_balancing_scheme = "EXTERNAL_MANAGED"
}

resource "google_compute_target_http_proxy" "default" {
  name        = "target-proxy"
  description = "a description"
  url_map     = google_compute_url_map.default.id
}

resource "google_compute_url_map" "default" {
  name            = "url-map-target-proxy"
  description     = "a description"
  default_service = google_compute_backend_service.default.id

  host_rule {
    hosts        = ["mysite.com"]
    path_matcher = "allpaths"
  }

  path_matcher {
    name            = "allpaths"
    default_service = google_compute_backend_service.default.id

    path_rule {
      paths   = ["/*"]
      service = google_compute_backend_service.default.id
    }
  }
}

resource "google_compute_backend_service" "default" {
  name                  = "backend"
  port_name             = "http"
  protocol              = "HTTP"
  timeout_sec           = 10
  load_balancing_scheme = "EXTERNAL_MANAGED"
}
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=global_forwarding_rule_hybrid&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Global Forwarding Rule Hybrid


```hcl
// Roughly mirrors https://cloud.google.com/load-balancing/docs/https/setting-up-ext-https-hybrid
variable "subnetwork_cidr" {
  default = "10.0.0.0/24"
}

resource "google_compute_network" "default" {
  name                    = "my-network"
}

resource "google_compute_network" "internal" {
  name                    = "my-internal-network"
  auto_create_subnetworks = false
}

resource "google_compute_subnetwork" "internal"{
  name                    = "my-subnetwork"
  network                 = google_compute_network.internal.id
  ip_cidr_range           = var.subnetwork_cidr
  region                  = "us-central1"
  private_ip_google_access= true
}

// Zonal NEG with GCE_VM_IP_PORT
resource "google_compute_network_endpoint_group" "default" {
  name                  = "default-neg"
  network               = google_compute_network.default.id
  default_port          = "90"
  zone                  = "us-central1-a"
  network_endpoint_type = "GCE_VM_IP_PORT"
}

// Zonal NEG with GCE_VM_IP
resource "google_compute_network_endpoint_group" "internal" {
  name                  = "internal-neg"
  network               = google_compute_network.internal.id
  subnetwork            = google_compute_subnetwork.internal.id
  zone                  = "us-central1-a"
  network_endpoint_type = "GCE_VM_IP"
}

// Hybrid connectivity NEG
resource "google_compute_network_endpoint_group" "hybrid" {
  name                  = "hybrid-neg"
  network               = google_compute_network.default.id
  default_port          = "90"
  zone                  = "us-central1-a"
  network_endpoint_type = "NON_GCP_PRIVATE_IP_PORT"
}

resource "google_compute_network_endpoint" "hybrid-endpoint" {
  network_endpoint_group = google_compute_network_endpoint_group.hybrid.name
  port       = google_compute_network_endpoint_group.hybrid.default_port
  ip_address = "127.0.0.1"
}

// Backend service for Zonal NEG
resource "google_compute_backend_service" "default" {
  name                  = "backend-default"
  port_name             = "http"
  protocol              = "HTTP"
  timeout_sec           = 10
  backend {
    group = google_compute_network_endpoint_group.default.id
    balancing_mode               = "RATE"
    max_rate_per_endpoint        = 10
  }
  health_checks = [google_compute_health_check.default.id]
}

// Backgend service for Hybrid NEG
resource "google_compute_backend_service" "hybrid" {
  name                  = "backend-hybrid"
  port_name             = "http"
  protocol              = "HTTP"
  timeout_sec           = 10
  backend {
    group                        = google_compute_network_endpoint_group.hybrid.id
    balancing_mode               = "RATE"
    max_rate_per_endpoint = 10
  }
  health_checks = [google_compute_health_check.default.id]
}

resource "google_compute_health_check" "default" {
  name               = "health-check"
  timeout_sec        = 1
  check_interval_sec = 1

  tcp_health_check {
    port = "80"
  }
}

resource "google_compute_url_map" "default" {
  name            = "url-map-target-proxy"
  description     = "a description"
  default_service = google_compute_backend_service.default.id

  host_rule {
    hosts        = ["mysite.com"]
    path_matcher = "allpaths"
  }

  path_matcher {
    name            = "allpaths"
    default_service = google_compute_backend_service.default.id

    path_rule {
      paths   = ["/*"]
      service = google_compute_backend_service.default.id
    }

    path_rule {
      paths   = ["/hybrid"]
      service = google_compute_backend_service.hybrid.id
    }
  }
}

resource "google_compute_target_http_proxy" "default" {
  name        = "target-proxy"
  description = "a description"
  url_map     = google_compute_url_map.default.id
}

resource "google_compute_global_forwarding_rule" "default" {
  name       = "global-rule"
  target     = google_compute_target_http_proxy.default.id
  port_range = "80"
}
```
## Example Usage - Private Service Connect Google Apis


```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const googleComputeNetworkNetwork =
      new google.computeNetwork.ComputeNetwork(this, "network", {
        autoCreateSubnetworks: false,
        name: "my-network",
        project: "my-project-name",
        provider: googleBeta,
      });
    new google.computeSubnetwork.ComputeSubnetwork(this, "vpc_subnetwork", {
      ipCidrRange: "10.2.0.0/16",
      name: "my-subnetwork",
      network: cdktf.Token.asString(googleComputeNetworkNetwork.id),
      privateIpGoogleAccess: true,
      project: cdktf.Token.asString(googleComputeNetworkNetwork.project),
      provider: googleBeta,
      region: "us-central1",
    });
    const googleComputeGlobalAddressDefault =
      new google.computeGlobalAddress.ComputeGlobalAddress(this, "default", {
        address: "100.100.100.106",
        addressType: "INTERNAL",
        name: "global-psconnect-ip",
        network: cdktf.Token.asString(googleComputeNetworkNetwork.id),
        project: cdktf.Token.asString(googleComputeNetworkNetwork.project),
        provider: googleBeta,
        purpose: "PRIVATE_SERVICE_CONNECT",
      });
    const googleComputeGlobalForwardingRuleDefault =
      new google.computeGlobalForwardingRule.ComputeGlobalForwardingRule(
        this,
        "default_3",
        {
          ipAddress: cdktf.Token.asString(googleComputeGlobalAddressDefault.id),
          loadBalancingScheme: "",
          name: "globalrule",
          network: googleComputeNetworkNetwork.id,
          project: cdktf.Token.asString(googleComputeNetworkNetwork.project),
          provider: googleBeta,
          target: "all-apis",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    googleComputeGlobalForwardingRuleDefault.overrideLogicalId("default");
  }
}

```

## Argument Reference

The following arguments are supported:


* `name` -
  (Required)
  Name of the resource; provided by the client when the resource is created.
  The name must be 1-63 characters long, and comply with
  [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
  Specifically, the name must be 1-63 characters long and match the regular
  expression `[aZ]([AZ09]*[aZ09])?` which means the first
  character must be a lowercase letter, and all following characters must
  be a dash, lowercase letter, or digit, except the last character, which
  cannot be a dash.
  For Private Service Connect forwarding rules that forward traffic to Google
  APIs, the forwarding rule name must be a 1-20 characters string with
  lowercase letters and numbers and must start with a letter.

* `target` -
  (Required)
  The URL of the target resource to receive the matched traffic.  For
  regional forwarding rules, this target must be in the same region as the
  forwarding rule. For global forwarding rules, this target must be a global
  load balancing resource.
  The forwarded traffic must be of a type appropriate to the target object.
  *  For load balancers, see the "Target" column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
  *  For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle:
    *  `vpcSc` - [ APIs that support VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/supported-products).
    *  `allApis` - [All supported Google APIs](https://cloud.google.com/vpc/docs/private-service-connect#supported-apis).

  For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.


- - -


* `description` -
  (Optional)
  An optional description of this resource. Provide this property when
  you create the resource.

* `ipAddress` -
  (Optional)
  IP address for which this forwarding rule accepts traffic. When a client
  sends traffic to this IP address, the forwarding rule directs the traffic
  to the referenced `target`.
  While creating a forwarding rule, specifying an `ipAddress` is
  required under the following circumstances:
  * When the `target` is set to `targetGrpcProxy` and
  `validateForProxyless` is set to `true`, the
  `ipAddress` should be set to `0000`.
  * When the `target` is a Private Service Connect Google APIs
  bundle, you must specify an `ipAddress`.

  Otherwise, you can optionally specify an IP address that references an
  existing static (reserved) IP address resource. When omitted, Google Cloud
  assigns an ephemeral IP address.
  Use one of the following formats to specify an IP address while creating a
  forwarding rule:
  * IP address number, as in `100123`
  * IPv6 address range, as in `2600:1234::/96`
  * Full resource URL, as in
  `https://wwwGoogleapisCom/compute/v1/projects/projectId/regions/region/addresses/addressName`
  * Partial URL or by name, as in:
    * `projects/projectId/regions/region/addresses/addressName`
    * `regions/region/addresses/addressName`
    * `global/addresses/addressName`
    * `addressName`

  The forwarding rule's `target`,
  and in most cases, also the `loadBalancingScheme`, determine the
  type of IP address that you can use. For detailed information, see
  [IP address
  specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
  When reading an `ipAddress`, the API always returns the IP
  address number.

* `ipProtocol` -
  (Optional)
  The IP protocol to which this rule applies.
  For protocol forwarding, valid
  options are `tcp`, `udp`, `esp`,
  `ah`, `sctp`, `icmp` and
  `l3Default`.
  The valid IP protocols are different for different load balancing products
  as described in [Load balancing
  features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
  Possible values are: `tcp`, `udp`, `esp`, `ah`, `sctp`, `icmp`.

* `ipVersion` -
  (Optional)
  The IP Version that will be used by this global forwarding rule.
  Possible values are: `ipv4`, `ipv6`.

* `labels` -
  (Optional)
  Labels to apply to this forwarding rule.  A list of key->value pairs.

* `loadBalancingScheme` -
  (Optional)
  Specifies the forwarding rule type.
  For more information about forwarding rules, refer to
  [Forwarding rule concepts](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts).
  Default value is `external`.
  Possible values are: `external`, `externalManaged`, `internalSelfManaged`.

* `metadataFilters` -
  (Optional)
  Opaque filter criteria used by Loadbalancer to restrict routing
  configuration to a limited set xDS compliant clients. In their xDS
  requests to Loadbalancer, xDS clients present node metadata. If a
  match takes place, the relevant routing configuration is made available
  to those proxies.
  For each metadataFilter in this list, if its filterMatchCriteria is set
  to MATCH_ANY, at least one of the filterLabels must match the
  corresponding label provided in the metadata. If its filterMatchCriteria
  is set to MATCH_ALL, then all of its filterLabels must match with
  corresponding labels in the provided metadata.
  metadataFilters specified here can be overridden by those specified in
  the UrlMap that this ForwardingRule references.
  metadataFilters only applies to Loadbalancers that have their
  loadBalancingScheme set to INTERNAL_SELF_MANAGED.
  Structure is [documented below](#nested_metadata_filters).

* `network` -
  (Optional)
  This field is not used for external load balancing.
  For Internal TCP/UDP Load Balancing, this field identifies the network that
  the load balanced IP should belong to for this Forwarding Rule.
  If the subnetwork is specified, the network of the subnetwork will be used.
  If neither subnetwork nor this field is specified, the default network will
  be used.
  For Private Service Connect forwarding rules that forward traffic to Google
  APIs, a network must be provided.

* `portRange` -
  (Optional)
  This field can only be used:
  * If `ipProtocol` is one of TCP, UDP, or SCTP.
  * By backend service-based network load balancers, target pool-based
  network load balancers, internal proxy load balancers, external proxy load
  balancers, Traffic Director, external protocol forwarding, and Classic VPN.
  Some products have restrictions on what ports can be used. See
  [port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#port_specifications)
  for details.

  * TargetHttpProxy: 80, 8080
  * TargetHttpsProxy: 443
  * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
                    1883, 5222
  * TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
                    1883, 5222
  * TargetVpnGateway: 500, 4500

* `sourceIpRanges` -
  (Optional)
  If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).

* `allowPscGlobalAccess` -
  (Optional, [Beta](https://terraform.io/docs/providers/google/guides/provider_versions.html))
  This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


<a name="nested_metadata_filters"></a>The `metadataFilters` block supports:

* `filterMatchCriteria` -
  (Required)
  Specifies how individual filterLabel matches within the list of
  filterLabels contribute towards the overall metadataFilter match.
  MATCH_ANY - At least one of the filterLabels must have a matching
  label in the provided metadata.
  MATCH_ALL - All filterLabels must have matching labels in the
  provided metadata.
  Possible values are: `matchAny`, `matchAll`.

* `filterLabels` -
  (Required)
  The list of label value pairs that must match labels in the
  provided metadata based on filterMatchCriteria
  This list must not be empty and can have at the most 64 entries.
  Structure is [documented below](#nested_filter_labels).


<a name="nested_filter_labels"></a>The `filterLabels` block supports:

* `name` -
  (Required)
  Name of the metadata label. The length must be between
  1 and 1024 characters, inclusive.

* `value` -
  (Required)
  The value that the label must match. The value has a maximum
  length of 1024 characters.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/global/forwardingRules/{{name}}`

* `pscConnectionId` -
  The PSC connection id of the PSC Forwarding Rule.

* `pscConnectionStatus` -
  The PSC connection status of the PSC Forwarding Rule. Possible values: `statusUnspecified`, `pending`, `accepted`, `rejected`, `closed`

* `labelFingerprint` -
  The fingerprint used for optimistic locking of this resource.  Used
  internally during updates.

* `baseForwardingRule` -
  [Output Only] The URL for the corresponding base Forwarding Rule. By base Forwarding Rule, we mean the Forwarding Rule that has the same IP address, protocol, and port settings with the current Forwarding Rule, but without sourceIPRanges specified. Always empty if the current Forwarding Rule does not have sourceIPRanges specified.
* `selfLink` - The URI of the created resource.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


GlobalForwardingRule can be imported using any of these accepted formats:

```
$ terraform import google_compute_global_forwarding_rule.default projects/{{project}}/global/forwardingRules/{{name}}
$ terraform import google_compute_global_forwarding_rule.default {{project}}/{{name}}
$ terraform import google_compute_global_forwarding_rule.default {{name}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).

<!-- cache-key: cdktf-0.17.0-pre.15 input-dbb7c0e3f1699a8cebf3a0bb45858ceb7895a7825af201ba6a7b43e3d99e7ade -->