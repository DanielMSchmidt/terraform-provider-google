---
subcategory: "Cloud Key Management Service"
description: |-
 Collection of resources to manage IAM policy for a Google Cloud KMS crypto key.
---


<!-- Please do not edit this file, it is generated. -->
# IAM policy for Google Cloud KMS crypto key

Three different resources help you manage your IAM policy for KMS crypto key. Each of these resources serves a different use case:

* `googleKmsCryptoKeyIamPolicy`: Authoritative. Sets the IAM policy for the crypto key and replaces any existing policy already attached.
* `googleKmsCryptoKeyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the crypto key are preserved.
* `googleKmsCryptoKeyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the crypto key are preserved.

~> **Note:** `googleKmsCryptoKeyIamPolicy` **cannot** be used in conjunction with `googleKmsCryptoKeyIamBinding` and `googleKmsCryptoKeyIamMember` or they will fight over what your policy should be.

~> **Note:** `googleKmsCryptoKeyIamBinding` resources **can be** used in conjunction with `googleKmsCryptoKeyIamMember` resources **only if** they do not grant privilege to the same role.

# google\_kms\_crypto\_key\_iam\_policy

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const googleKmsKeyRingKeyring = new google.kmsKeyRing.KmsKeyRing(
      this,
      "keyring",
      {
        location: "global",
        name: "keyring-example",
      }
    );
    const dataGoogleIamPolicyAdmin =
      new google.dataGoogleIamPolicy.DataGoogleIamPolicy(this, "admin", {
        binding: [
          {
            members: ["user:jane@example.com"],
            role: "roles/cloudkms.cryptoKeyEncrypter",
          },
        ],
      });
    const googleKmsCryptoKeyKey = new google.kmsCryptoKey.KmsCryptoKey(
      this,
      "key",
      {
        keyRing: cdktf.Token.asString(googleKmsKeyRingKeyring.id),
        lifecycle: {
          preventDestroy: true,
        },
        name: "crypto-key-example",
        rotationPeriod: "100000s",
      }
    );
    new google.kmsCryptoKeyIamPolicy.KmsCryptoKeyIamPolicy(this, "crypto_key", {
      cryptoKeyId: cdktf.Token.asString(googleKmsCryptoKeyKey.id),
      policyData: cdktf.Token.asString(dataGoogleIamPolicyAdmin.policyData),
    });
  }
}

```

With IAM Conditions ([beta](https://terraform.io/docs/providers/google/provider_versions.html)):

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new google.dataGoogleIamPolicy.DataGoogleIamPolicy(this, "admin", {
      binding: [
        {
          condition: {
            description: "Expiring at midnight of 2019-12-31",
            expression: 'request.time < timestamp(\\"2020-01-01T00:00:00Z\\")',
            title: "expires_after_2019_12_31",
          },
          members: ["user:jane@example.com"],
          role: "roles/cloudkms.cryptoKeyEncrypter",
        },
      ],
    });
  }
}

```

# google\_kms\_crypto\_key\_iam\_binding

```hcl
resource "google_kms_crypto_key_iam_binding" "crypto_key" {
  crypto_key_id = google_kms_crypto_key.key.id
  role          = "roles/cloudkms.cryptoKeyEncrypter"

  members = [
    "user:jane@example.com",
  ]
}
```

With IAM Conditions ([beta](https://terraform.io/docs/providers/google/provider_versions.html)):

```hcl
resource "google_kms_crypto_key_iam_binding" "crypto_key" {
  crypto_key_id = google_kms_crypto_key.key.id
  role          = "roles/cloudkms.cryptoKeyEncrypter"

  members = [
    "user:jane@example.com",
  ]

  condition {
    title       = "expires_after_2019_12_31"
    description = "Expiring at midnight of 2019-12-31"
    expression  = "request.time < timestamp(\"2020-01-01T00:00:00Z\")"
  }
}
```

# google\_kms\_crypto\_key\_iam\_member

```hcl
resource "google_kms_crypto_key_iam_member" "crypto_key" {
  crypto_key_id = google_kms_crypto_key.key.id
  role          = "roles/cloudkms.cryptoKeyEncrypter"
  member        = "user:jane@example.com"
}
```

With IAM Conditions ([beta](https://terraform.io/docs/providers/google/provider_versions.html)):

```hcl
resource "google_kms_crypto_key_iam_member" "crypto_key" {
  crypto_key_id = google_kms_crypto_key.key.id
  role          = "roles/cloudkms.cryptoKeyEncrypter"
  member        = "user:jane@example.com"

  condition {
    title       = "expires_after_2019_12_31"
    description = "Expiring at midnight of 2019-12-31"
    expression  = "request.time < timestamp(\"2020-01-01T00:00:00Z\")"
  }
}
```

## Argument Reference

The following arguments are supported:

* `cryptoKeyId` - (Required) The crypto key ID, in the form
    `{projectId}/{locationName}/{keyRingName}/{cryptoKeyName}` or
    `{locationName}/{keyRingName}/{cryptoKeyName}`. In the second form,
    the provider's project setting will be used as a fallback.

* `member/members` - (Required) Identities that will be granted the privilege in `role`.
  Each entry can have one of the following values:
  * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
  * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
  * **user:{emailid}**: An email address that represents a specific Google account. For example, jane@example.com or joe@example.com.
  * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
  * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
  * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.

* `role` - (Required) The role that should be applied. Note that custom roles must be of the format
    `[projects|organizations]/{parentName}/roles/{roleName}`.

* `policyData` - (Required only by `googleKmsCryptoKeyIamPolicy`) The policy data generated by
  a `googleIamPolicy` data source.

* `condition` - (Optional, [Beta](https://terraform.io/docs/providers/google/provider_versions.html)) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
  Structure is [documented below](#nested_condition).

---

<a name="nested_condition"></a>The `condition` block supports:

* `expression` - (Required) Textual representation of an expression in Common Expression Language syntax.

* `title` - (Required) A title for the expression, i.e. a short string describing its purpose.

* `description` - (Optional) An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.

~> **Warning:** Terraform considers the `role` and condition contents (`title`+`description`+`expression`) as the
  identifier for the binding. This means that if any part of the condition is changed out-of-band, Terraform will
  consider it to be an entirely different resource and will treat it as such.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are
exported:

* `etag` - (Computed) The etag of the project's IAM policy.

## Import

IAM member imports use space-delimited identifiers; the resource in question, the role, and the account.  This member resource can be imported using the `cryptoKeyId`, role, and member identity e.g.

```
$ terraform import google_kms_crypto_key_iam_member.crypto_key "your-project-id/location-name/key-ring-name/key-name roles/viewer user:foo@example.com"
```

IAM binding imports use space-delimited identifiers; first the resource in question and then the role.  These bindings can be imported using the `cryptoKeyId` and role, e.g.

```
$ terraform import google_kms_crypto_key_iam_binding.crypto_key "your-project-id/location-name/key-ring-name/key-name roles/editor"
```

IAM policy imports use the identifier of the resource in question.  This policy resource can be imported using the `cryptoKeyId`, e.g.

```
$ terraform import google_kms_crypto_key_iam_policy.crypto_key your-project-id/location-name/key-ring-name/key-name
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-773af0b4c961c963636ba87fa0e55846be053f36091f2b30b80b11519cde66e2 -->