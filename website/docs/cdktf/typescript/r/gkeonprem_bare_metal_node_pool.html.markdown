---

<!-- Please do not edit this file, it is generated. -->
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Anthos On-Prem"
description: |-
  A Google Bare Metal Node Pool.
---

# google\_gkeonprem\_bare\_metal\_node\_pool

A Google Bare Metal Node Pool.

~> **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
See [Provider Versions](https://terraform.io/docs/providers/google/guides/provider_versions.html) for more details on beta resources.


## Example Usage - Gkeonprem Bare Metal Node Pool Basic


```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const googleGkeonpremBareMetalClusterDefaultBasic =
      new google.GkeonpremBareMetalCluster(this, "default-basic", {
        admin_cluster_membership:
          "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
        bare_metal_version: "1.12.3",
        control_plane: [
          {
            control_plane_node_pool_config: [
              {
                node_pool_config: [
                  {
                    labels: [{}],
                    node_configs: [
                      {
                        labels: [{}],
                        node_ip: "10.200.0.9",
                      },
                    ],
                    operating_system: "LINUX",
                  },
                ],
              },
            ],
          },
        ],
        load_balancer: [
          {
            metal_lb_config: [
              {
                address_pools: [
                  {
                    addresses: [
                      "10.200.0.14/32",
                      "10.200.0.15/32",
                      "10.200.0.16/32",
                      "10.200.0.17/32",
                      "10.200.0.18/32",
                      "fd00:1::f/128",
                      "fd00:1::10/128",
                      "fd00:1::11/128",
                      "fd00:1::12/128",
                    ],
                    pool: "pool1",
                  },
                ],
              },
            ],
            port_config: [
              {
                control_plane_load_balancer_port: 443,
              },
            ],
            vip_config: [
              {
                control_plane_vip: "10.200.0.13",
                ingress_vip: "10.200.0.14",
              },
            ],
          },
        ],
        location: "us-west1",
        name: "default-basic",
        network_config: [
          {
            island_mode_cidr: [
              {
                pod_address_cidr_blocks: ["10.240.0.0/13"],
                service_address_cidr_blocks: ["172.26.0.0/16"],
              },
            ],
          },
        ],
        provider: googleBeta,
        security_config: [
          {
            authorization: [
              {
                admin_users: [
                  {
                    username: "admin@hashicorptest.com",
                  },
                ],
              },
            ],
          },
        ],
        storage: [
          {
            lvp_node_mounts_config: [
              {
                path: "/mnt/localpv-disk",
                storage_class: "local-disks",
              },
            ],
            lvp_share_config: [
              {
                lvp_config: [
                  {
                    path: "/mnt/localpv-share",
                    storage_class: "local-shared",
                  },
                ],
                shared_path_pv_count: 5,
              },
            ],
          },
        ],
      });
    new google.GkeonpremBareMetalNodePool(this, "nodepool-basic", {
      bare_metal_cluster: googleGkeonpremBareMetalClusterDefaultBasic.name,
      location: "us-west1",
      name: "np-nodepool",
      node_pool_config: [
        {
          node_configs: [
            {
              node_ip: "10.200.0.11",
            },
          ],
          operating_system: "LINUX",
        },
      ],
      provider: googleBeta,
    });
  }
}

```
## Example Usage - Gkeonprem Bare Metal Node Pool Full


```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const googleGkeonpremBareMetalClusterDefaultFull =
      new google.GkeonpremBareMetalCluster(this, "default-full", {
        admin_cluster_membership:
          "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
        bare_metal_version: "1.12.3",
        control_plane: [
          {
            control_plane_node_pool_config: [
              {
                node_pool_config: [
                  {
                    labels: [{}],
                    node_configs: [
                      {
                        labels: [{}],
                        node_ip: "10.200.0.9",
                      },
                    ],
                    operating_system: "LINUX",
                  },
                ],
              },
            ],
          },
        ],
        load_balancer: [
          {
            metal_lb_config: [
              {
                address_pools: [
                  {
                    addresses: [
                      "10.200.0.14/32",
                      "10.200.0.15/32",
                      "10.200.0.16/32",
                      "10.200.0.17/32",
                      "10.200.0.18/32",
                      "fd00:1::f/128",
                      "fd00:1::10/128",
                      "fd00:1::11/128",
                      "fd00:1::12/128",
                    ],
                    pool: "pool1",
                  },
                ],
              },
            ],
            port_config: [
              {
                control_plane_load_balancer_port: 443,
              },
            ],
            vip_config: [
              {
                control_plane_vip: "10.200.0.13",
                ingress_vip: "10.200.0.14",
              },
            ],
          },
        ],
        location: "us-west1",
        name: "default-full",
        network_config: [
          {
            island_mode_cidr: [
              {
                pod_address_cidr_blocks: ["10.240.0.0/13"],
                service_address_cidr_blocks: ["172.26.0.0/16"],
              },
            ],
          },
        ],
        provider: googleBeta,
        security_config: [
          {
            authorization: [
              {
                admin_users: [
                  {
                    username: "admin@hashicorptest.com",
                  },
                ],
              },
            ],
          },
        ],
        storage: [
          {
            lvp_node_mounts_config: [
              {
                path: "/mnt/localpv-disk",
                storage_class: "local-disks",
              },
            ],
            lvp_share_config: [
              {
                lvp_config: [
                  {
                    path: "/mnt/localpv-share",
                    storage_class: "local-shared",
                  },
                ],
                shared_path_pv_count: 5,
              },
            ],
          },
        ],
      });
    new google.GkeonpremBareMetalNodePool(this, "nodepool-full", {
      annotations: [{}],
      bare_metal_cluster: googleGkeonpremBareMetalClusterDefaultFull.name,
      display_name: "test-name",
      location: "us-west1",
      name: "np-nodepool",
      node_pool_config: [
        {
          labels: [{}],
          node_configs: [
            {
              labels: [{}],
              node_ip: "10.200.0.11",
            },
          ],
          operating_system: "LINUX",
          taints: [
            {
              effect: "NO_EXECUTE",
              key: "test-key",
              value: "test-value",
            },
          ],
        },
      ],
      provider: googleBeta,
    });
  }
}

```

## Argument Reference

The following arguments are supported:


* `nodePoolConfig` -
  (Required)
  Node pool configuration.
  Structure is [documented below](#nested_node_pool_config).

* `name` -
  (Required)
  The bare metal node pool name.

* `bareMetalCluster` -
  (Required)
  The cluster this node pool belongs to.

* `location` -
  (Required)
  The location of the resource.


<a name="nested_node_pool_config"></a>The `nodePoolConfig` block supports:

* `nodeConfigs` -
  (Required)
  The list of machine addresses in the Bare Metal Node Pool.
  Structure is [documented below](#nested_node_configs).

* `operatingSystem` -
  (Optional)
  Specifies the nodes operating system (default: LINUX).

* `taints` -
  (Optional)
  The initial taints assigned to nodes of this node pool.
  Structure is [documented below](#nested_taints).

* `labels` -
  (Optional)
  The map of Kubernetes labels (key/value pairs) to be applied to
  each node. These will added in addition to any default label(s)
  that Kubernetes may apply to the node. In case of conflict in
  label keys, the applied set may differ depending on the Kubernetes
  version -- it's best to assume the behavior is undefined and
  conflicts should be avoided. For more information, including usage
  and the valid values, see:
    http://kubernetes.io/v1.1/docs/user-guide/labels.html
  An object containing a list of "key": value pairs.
  Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.


<a name="nested_node_configs"></a>The `nodeConfigs` block supports:

* `nodeIp` -
  (Optional)
  The default IPv4 address for SSH access and Kubernetes node.
  Example: 192.168.0.1

* `labels` -
  (Optional)
  The map of Kubernetes labels (key/value pairs) to be applied to
  each node. These will added in addition to any default label(s)
  that Kubernetes may apply to the node. In case of conflict in
  label keys, the applied set may differ depending on the Kubernetes
  version -- it's best to assume the behavior is undefined and
  conflicts should be avoided. For more information, including usage
  and the valid values, see:
    http://kubernetes.io/v1.1/docs/user-guide/labels.html
  An object containing a list of "key": value pairs.
  Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.

<a name="nested_taints"></a>The `taints` block supports:

* `key` -
  (Optional)
  Key associated with the effect.

* `value` -
  (Optional)
  Value associated with the effect.

* `effect` -
  (Optional)
  Specifies the nodes operating system (default: LINUX).
  Possible values are: `effectUnspecified`, `preferNoSchedule`, `noExecute`.

- - -


* `displayName` -
  (Optional)
  The display name for the Bare Metal Node Pool.

* `annotations` -
  (Optional)
  Annotations on the Bare Metal Node Pool.
  This field has the same restrictions as Kubernetes annotations.
  The total size of all keys and values combined is limited to 256k.
  Key can have 2 segments: prefix (optional) and name (required),
  separated by a slash (/).
  Prefix must be a DNS subdomain.
  Name must be 63 characters or less, begin and end with alphanumerics,
  with dashes (-), underscores (_), dots (.), and alphanumerics between.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/bareMetalClusters/{{bareMetalCluster}}/bareMetalNodePools/{{name}}`

* `status` -
  Specifies detailed node pool status.
  Structure is [documented below](#nested_status).

* `uid` -
  The unique identifier of the Bare Metal Node Pool.

* `state` -
  The current state of this cluster.

* `reconciling` -
  If set, there are currently changes in flight to the Bare Metal User Cluster.

* `createTime` -
  The time the cluster was created, in RFC3339 text format.

* `updateTime` -
  The time the cluster was last updated, in RFC3339 text format.

* `deleteTime` -
  The time the cluster was deleted, in RFC3339 text format.

* `etag` -
  This checksum is computed by the server based on the value of other
  fields, and may be sent on update and delete requests to ensure the
  client has an up-to-date value before proceeding.
  Allows clients to perform consistent read-modify-writes
  through optimistic concurrency control.


<a name="nested_status"></a>The `status` block contains:

* `errorMessage` -
  (Output)
  Human-friendly representation of the error message from the user cluster
  controller. The error message can be temporary as the user cluster
  controller creates a cluster or node pool. If the error message persists
  for a longer period of time, it can be used to surface error message to
  indicate real problems requiring user intervention.

* `conditions` -
  (Output)
  ResourceConditions provide a standard mechanism for higher-level status reporting from user cluster controller.
  Structure is [documented below](#nested_conditions).


<a name="nested_conditions"></a>The `conditions` block contains:

* `type` -
  (Optional)
  Type of the condition.
  (e.g., ClusterRunning, NodePoolRunning or ServerSidePreflightReady)

* `reason` -
  (Optional)
  Machine-readable message indicating details about last transition.

* `message` -
  (Optional)
  Human-readable message indicating details about last transition.

* `lastTransitionTime` -
  (Output)
  Last time the condition transit from one status to another.

* `state` -
  (Output)
  The lifecycle state of the condition.

## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


BareMetalNodePool can be imported using any of these accepted formats:

```
$ terraform import google_gkeonprem_bare_metal_node_pool.default projects/{{project}}/locations/{{location}}/bareMetalClusters/{{bare_metal_cluster}}/bareMetalNodePools/{{name}}
$ terraform import google_gkeonprem_bare_metal_node_pool.default {{project}}/{{location}}/{{bare_metal_cluster}}/{{name}}
$ terraform import google_gkeonprem_bare_metal_node_pool.default {{location}}/{{bare_metal_cluster}}/{{name}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).

<!-- cache-key: cdktf-0.17.0-pre.15 input-3c52161fcb6e3d1ffaf4e5ae64455317192cef547616aaa66dad348f0c88bcbe -->