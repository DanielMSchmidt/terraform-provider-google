---

<!-- Please do not edit this file, it is generated. -->
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Access Context Manager (VPC Service Controls)"
description: |-
  Allows configuring a single GCP resource that should be inside of a service perimeter.
---

# google\_access\_context\_manager\_service\_perimeter\_resource

Allows configuring a single GCP resource that should be inside of a service perimeter.
This resource is intended to be used in cases where it is not possible to compile a full list
of projects to include in a `google_access_context_manager_service_perimeter` resource,
to enable them to be added separately.

~> **Note:** If this resource is used alongside a `google_access_context_manager_service_perimeter` resource,
the service perimeter resource must have a `lifecycle` block with `ignore_changes = [status[0].resources]` so
they don't fight over which resources should be in the policy.


To get more information about ServicePerimeterResource, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters)
* How-to Guides
    * [Service Perimeter Quickstart](https://cloud.google.com/vpc-service-controls/docs/quickstart)

~> **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
you must specify a `billing_project` and set `user_project_override` to true
in the provider configuration. Otherwise the ACM API will return a 403 error.
Your account must have the `serviceusage.services.use` permission on the
`billing_project` you defined.

## Example Usage - Access Context Manager Service Perimeter Resource Basic


```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_access_context_manager_access_policy_access_policy =
        google.access_context_manager_access_policy.AccessContextManagerAccessPolicy(self, "access-policy",
            parent="organizations/123456789",
            title="my policy"
        )
        google_access_context_manager_service_perimeter_service_perimeter_resource =
        google.access_context_manager_service_perimeter.AccessContextManagerServicePerimeter(self, "service-perimeter-resource",
            lifecycle=cdktf.TerraformResourceLifecycle(
                ignore_changes=[status0.resources]
            ),
            name="accessPolicies/${" + google_access_context_manager_access_policy_access_policy.name + "}/servicePerimeters/restrict_all",
            parent="accessPolicies/${" + google_access_context_manager_access_policy_access_policy.name + "}",
            status=AccessContextManagerServicePerimeterStatus(
                restricted_services=["storage.googleapis.com"]
            ),
            title="restrict_all"
        )
        google_access_context_manager_service_perimeter_resource_service_perimeter_resource =
        google.access_context_manager_service_perimeter_resource.AccessContextManagerServicePerimeterResource(self, "service-perimeter-resource_2",
            perimeter_name=cdktf.Token.as_string(google_access_context_manager_service_perimeter_service_perimeter_resource.name),
            resource="projects/987654321"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_access_context_manager_service_perimeter_resource_service_perimeter_resource.override_logical_id("service-perimeter-resource")
```

## Argument Reference

The following arguments are supported:


* `resource` -
  (Required)
  A GCP resource that is inside of the service perimeter.
  Currently only projects are allowed.
  Format: projects/{project_number}

* `perimeter_name` -
  (Required)
  The name of the Service Perimeter to add this resource to.


- - -



## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `{{perimeter_name}}/{{resource}}`


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


ServicePerimeterResource can be imported using any of these accepted formats:

```
$ terraform import google_access_context_manager_service_perimeter_resource.default {{perimeter_name}}/{{resource}}
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-f1afe77b5e7538560f58d3e6d7c7a27ed1580331e6467a18880c43361cad0e7c -->