---
subcategory: "GKEHub"
description: |-
  Contains information about a GKEHub Feature Memberships.
---


<!-- Please do not edit this file, it is generated. -->
# google\_gkehub\_feature\_membership

Contains information about a GKEHub Feature Memberships. Feature Memberships configure GKEHub Features that apply to specific memberships rather than the project as a whole. The google_gke_hub is the Fleet API.

~> **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
See [Provider Versions](https://terraform.io/docs/providers/google/guides/provider_versions.html) for more details on beta resources.


## Example Usage - Config Management

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_container_cluster_cluster =
        google.container_cluster.ContainerCluster(self, "cluster",
            initial_node_count=1,
            location="us-central1-a",
            name="my-cluster",
            provider=google_beta
        )
        google_gke_hub_feature_feature = google.GkeHubFeature(self, "feature",
            labels=[{
                "foo": "bar"
            }
            ],
            location="global",
            name="configmanagement",
            provider=google_beta
        )
        google_gke_hub_membership_membership = google.GkeHubMembership(self, "membership",
            endpoint=[{
                "gke_cluster": [{
                    "resource_link": "//container.googleapis.com/${" + google_container_cluster_cluster.id + "}"
                }
                ]
            }
            ],
            membership_id="my-membership",
            provider=google_beta
        )
        google.GkeHubFeatureMembership(self, "feature_member",
            configmanagement=[{
                "config_sync": [{
                    "git": [{
                        "sync_repo": "https://github.com/hashicorp/terraform"
                    }
                    ]
                }
                ],
                "version": "1.6.2"
            }
            ],
            feature=google_gke_hub_feature_feature.name,
            location="global",
            membership=google_gke_hub_membership_membership.membership_id,
            provider=google_beta
        )
```
## Example Usage - Config Management with OCI

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_container_cluster_cluster =
        google.container_cluster.ContainerCluster(self, "cluster",
            initial_node_count=1,
            location="us-central1-a",
            name="my-cluster",
            provider=google_beta
        )
        google_gke_hub_feature_feature = google.GkeHubFeature(self, "feature",
            labels=[{
                "foo": "bar"
            }
            ],
            location="global",
            name="configmanagement",
            provider=google_beta
        )
        google_gke_hub_membership_membership = google.GkeHubMembership(self, "membership",
            endpoint=[{
                "gke_cluster": [{
                    "resource_link": "//container.googleapis.com/${" + google_container_cluster_cluster.id + "}"
                }
                ]
            }
            ],
            membership_id="my-membership",
            provider=google_beta
        )
        google.GkeHubFeatureMembership(self, "feature_member",
            configmanagement=[{
                "config_sync": [{
                    "oci": [{
                        "gcp_service_account_email": "sa@project-id.iam.gserviceaccount.com",
                        "policy_dir": "config-connector",
                        "secret_type": "gcpserviceaccount",
                        "sync_repo": "us-central1-docker.pkg.dev/sample-project/config-repo/config-sync-gke:latest",
                        "sync_wait_secs": "20"
                    }
                    ]
                }
                ],
                "version": "1.12.0"
            }
            ],
            feature=google_gke_hub_feature_feature.name,
            location="global",
            membership=google_gke_hub_membership_membership.membership_id,
            provider=google_beta
        )
```

## Example Usage - Multi Cluster Service Discovery

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google.GkeHubFeature(self, "feature",
            labels=[{
                "foo": "bar"
            }
            ],
            location="global",
            name="multiclusterservicediscovery",
            provider=google_beta
        )
```

## Example Usage - Service Mesh

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_container_cluster_cluster =
        google.container_cluster.ContainerCluster(self, "cluster",
            initial_node_count=1,
            location="us-central1-a",
            name="my-cluster",
            provider=google_beta
        )
        google_gke_hub_feature_feature = google.GkeHubFeature(self, "feature",
            location="global",
            name="servicemesh",
            provider=google_beta
        )
        google_gke_hub_membership_membership = google.GkeHubMembership(self, "membership",
            endpoint=[{
                "gke_cluster": [{
                    "resource_link": "//container.googleapis.com/${" + google_container_cluster_cluster.id + "}"
                }
                ]
            }
            ],
            membership_id="my-membership",
            provider=google_beta
        )
        google.GkeHubFeatureMembership(self, "feature_member",
            feature=google_gke_hub_feature_feature.name,
            location="global",
            membership=google_gke_hub_membership_membership.membership_id,
            mesh=[{
                "management": "MANAGEMENT_AUTOMATIC"
            }
            ],
            provider=google_beta
        )
```

## Argument Reference

The following arguments are supported:

- - -

* `configmanagement` -
  (Optional)
  Config Management-specific spec. Structure is [documented below](#nested_configmanagement).

* `mesh` -
  (Optional)
  Service mesh specific spec. Structure is [documented below](#nested_mesh).
  
* `feature` -
  (Optional)
  The name of the feature
  
* `location` -
  (Optional)
  The location of the feature
  
* `membership` -
  (Optional)
  The name of the membership
  
* `project` -
  (Optional)
  The project of the feature
  


<a name="nested_configmanagement"></a>The `configmanagement` block supports:
    
* `binauthz` -
  (Optional)
  Binauthz configuration for the cluster. Structure is [documented below](#nested_binauthz).
    
* `config_sync` -
  (Optional)
  Config Sync configuration for the cluster. Structure is [documented below](#nested_config_sync).
    
* `hierarchy_controller` -
  (Optional)
  Hierarchy Controller configuration for the cluster. Structure is [documented below](#nested_hierarchy_controller).
    
* `policy_controller` -
  (Optional)
  Policy Controller configuration for the cluster. Structure is [documented below](#nested_policy_controller).
    
* `version` -
  (Optional)
  Version of ACM installed.
    
<a name="nested_binauthz"></a>The `binauthz` block supports:
    
* `enabled` -
  (Optional)
  Whether binauthz is enabled in this cluster.
    
<a name="nested_config_sync"></a>The `config_sync` block supports:
    
* `git` -
  (Optional) Structure is [documented below](#nested_git).

* `oci` -
  (Optional) Supported from ACM versions 1.12.0 onwards. Structure is [documented below](#nested_oci).
  
  Use either `git` or `oci` config option.

* `prevent_drift` -
  (Optional)
  Supported from ACM versions 1.10.0 onwards. Set to true to enable the Config Sync admission webhook to prevent drifts. If set to "false", disables the Config Sync admission webhook and does not prevent drifts.
    
* `source_format` -
  (Optional)
  Specifies whether the Config Sync Repo is in "hierarchical" or "unstructured" mode.
    
<a name="nested_git"></a>The `git` block supports:
    
* `gcp_service_account_email` -
  (Optional)
  The GCP Service Account Email used for auth when secretType is gcpServiceAccount.

* `https_proxy` -
  (Optional)
  URL for the HTTPS proxy to be used when communicating with the Git repo.
    
* `policy_dir` -
  (Optional)
  The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
    
* `secret_type` -
  (Optional)
  Type of secret configured for access to the Git repo.
    
* `sync_branch` -
  (Optional)
  The branch of the repository to sync from. Default: master.
    
* `sync_repo` -
  (Optional)
  The URL of the Git repository to use as the source of truth.
    
* `sync_rev` -
  (Optional)
  Git revision (tag or hash) to check out. Default HEAD.
    
* `sync_wait_secs` -
  (Optional)
  Period in seconds between consecutive syncs. Default: 15.

<a name="nested_oci"></a>The `oci` block supports:
    
* `gcp_service_account_email` -
  (Optional)
  The GCP Service Account Email used for auth when secret_type is gcpserviceaccount.
    
* `policy_dir` -
  (Optional)
  The absolute path of the directory that contains the local resources. Default: the root directory of the image.
    
* `secret_type` -
  (Optional)
  Type of secret configured for access to the OCI Image. Must be one of gcenode, gcpserviceaccount or none.
    
* `sync_repo` -
  (Optional)
  The OCI image repository URL for the package to sync from. e.g. LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME.
    
* `sync_wait_secs` -
  (Optional)
  Period in seconds(int64 format) between consecutive syncs. Default: 15.
    
<a name="nested_hierarchy_controller"></a>The `hierarchy_controller` block supports:
    
* `enable_hierarchical_resource_quota` -
  (Optional)
  Whether hierarchical resource quota is enabled in this cluster.
    
* `enable_pod_tree_labels` -
  (Optional)
  Whether pod tree labels are enabled in this cluster.
    
* `enabled` -
  (Optional)
  Whether Hierarchy Controller is enabled in this cluster.
    
<a name="nested_policy_controller"></a>The `policy_controller` block supports:
    
* `audit_interval_seconds` -
  (Optional)
  Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
    
* `enabled` -
  (Optional)
  Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
    
* `exemptable_namespaces` -
  (Optional)
  The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
    
* `log_denies_enabled` -
  (Optional)
  Logs all denies and dry run failures.
    
* `referential_rules_enabled` -
  (Optional)
  Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
    
* `template_library_installed` -
  (Optional)
  Installs the default template library along with Policy Controller.

* `mutation_enabled` -
  (Optional)
  Enables mutation in policy controller. If true, mutation CRDs, webhook, and controller deployment will be deployed to the cluster.

* `monitoring` -
  (Optional)
  Specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: [\"cloudmonitoring\", \"prometheus\"]. Default: [\"cloudmonitoring\", \"prometheus\"]    

<a name="nested_mesh"></a>The `mesh` block supports:

* `management` -
  (Optional)
  Whether to automatically manage Service Mesh. Can either be `MANAGEMENT_AUTOMATIC` or `MANAGEMENT_MANUAL`.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/features/{{feature}}/membershipId/{{membership}}`

## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options: configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import

FeatureMembership can be imported using any of these accepted formats:

```
$ terraform import google_gke_hub_feature_membership.default projects/{{project}}/locations/{{location}}/features/{{feature}}/membershipId/{{membership}}
$ terraform import google_gke_hub_feature_membership.default {{project}}/{{location}}/{{feature}}/{{membership}}
$ terraform import google_gke_hub_feature_membership.default {{location}}/{{feature}}/{{membership}}
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-ec5a7255bbbfa2fcdaff5b47cd92dae4ade0d23187f2100e8cc3014da95b438f -->