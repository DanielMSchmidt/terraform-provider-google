---
subcategory: "Cloud Bigtable"
description: |-
  Creates a Google Cloud Bigtable table inside an instance.
---


<!-- Please do not edit this file, it is generated. -->
# google_bigtable_table

Creates a Google Cloud Bigtable table inside an instance. For more information see
[the official documentation](https://cloud.google.com/bigtable/) and
[API](https://cloud.google.com/bigtable/docs/go/reference).

-> **Note:** It is strongly recommended to set `lifecycle { prevent_destroy = true }`
on tables in order to prevent accidental data loss. See
[Terraform docs](https://www.terraform.io/docs/configuration/resources.html#prevent_destroy)
for more information on lifecycle parameters.


## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const googleBigtableInstanceInstance =
      new google.bigtableInstance.BigtableInstance(this, "instance", {
        cluster: [
          {
            clusterId: "tf-instance-cluster",
            numNodes: 3,
            storageType: "HDD",
            zone: "us-central1-b",
          },
        ],
        lifecycle: {
          preventDestroy: true,
        },
        name: "tf-instance",
      });
    new google.bigtableTable.BigtableTable(this, "table", {
      columnFamily: [
        {
          family: "family-first",
        },
        {
          family: "family-second",
        },
      ],
      instanceName: cdktf.Token.asString(googleBigtableInstanceInstance.name),
      lifecycle: {
        preventDestroy: true,
      },
      name: "tf-table",
      splitKeys: ["a", "b", "c"],
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the table. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters and numbers.

* `instanceName` - (Required) The name of the Bigtable instance.

* `splitKeys` - (Optional) A list of predefined keys to split the table on.
!> **Warning:** Modifying the `splitKeys` of an existing table will cause Terraform
to delete/recreate the entire `googleBigtableTable` resource.

* `columnFamily` - (Optional) A group of columns within a table which share a common configuration. This can be specified multiple times. Structure is documented below.

* `project` - (Optional) The ID of the project in which the resource belongs. If it
    is not provided, the provider project is used.

* `deletionProtection` - (Optional) A field to make the table protected against data loss i.e. when set to PROTECTED, deleting the table, the column families in the table, and the instance containing the table would be prohibited. If not provided, deletion protection will be set to UNPROTECTED.

-----

`columnFamily` supports the following arguments:

* `family` - (Optional) The name of the column family.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are
exported:

* `id` - an identifier for the resource with format `projects/{{project}}/instances/{{instanceName}}/tables/{{name}}`


## Import

Bigtable Tables can be imported using any of these accepted formats:

```
$ terraform import google_bigtable_table.default projects/{{project}}/instances/{{instance_name}}/tables/{{name}}
$ terraform import google_bigtable_table.default {{project}}/{{instance_name}}/{{name}}
$ terraform import google_bigtable_table.default {{instance_name}}/{{name}}
```

The following fields can't be read and will show diffs if set in config when imported:

- `splitKeys`

<!-- cache-key: cdktf-0.17.0-pre.15 input-327876aabc1c73124c0c9da9ac9c2addf86b3461cde22112585f21505ad41da1 -->