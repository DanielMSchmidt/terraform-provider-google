---

<!-- Please do not edit this file, it is generated. -->
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Managed Microsoft Active Directory"
description: |-
  Creates a Peering for Managed AD instance.
---

# google\_active\_directory\_peering

Creates a Peering for Managed AD instance.

~> **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
See [Provider Versions](https://terraform.io/docs/providers/google/guides/provider_versions.html) for more details on beta resources.

To get more information about Peering, see:

* [API documentation](https://cloud.google.com/managed-microsoft-ad/reference/rest/v1beta1/projects.locations.global.peerings)
* How-to Guides
    * [Active Directory Domain Peering](https://cloud.google.com/managed-microsoft-ad/docs/domain-peering)

## Example Usage - Active Directory Peering Basic


```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_compute_network_source_network =
        google.compute_network.ComputeNetwork(self, "source-network",
            name="ad-network",
            provider=google_beta
        )
        google_project_peered_project = google.project.Project(self, "peered-project",
            billing_account="000000-0000000-0000000-000000",
            name="my-peered-project",
            org_id="123456789",
            project_id="my-peered-project",
            provider=google_beta
        )
        google_project_service_compute =
        google.project_service.ProjectService(self, "compute",
            project=cdktf.Token.as_string(google_project_peered_project.project_id),
            provider=google_beta,
            service="compute.googleapis.com"
        )
        google_active_directory_domain_ad_domain =
        google.active_directory_domain.ActiveDirectoryDomain(self, "ad-domain",
            authorized_networks=[
                cdktf.Token.as_string(google_compute_network_source_network.id)
            ],
            domain_name="ad.test.hashicorptest.com",
            locations=["us-central1"],
            provider=google_beta,
            reserved_ip_range="192.168.255.0/24"
        )
        google_compute_network_peered_network =
        google.compute_network.ComputeNetwork(self, "peered-network",
            name="ad-peered-network",
            project=cdktf.Token.as_string(google_project_service_compute.project),
            provider=google_beta
        )
        google.ActiveDirectoryPeering(self, "ad-domain-peering",
            authorized_network=google_compute_network_peered_network.id,
            domain_resource=google_active_directory_domain_ad_domain.name,
            labels=[{
                "foo": "bar"
            }
            ],
            peering_id="ad-domain-peering",
            provider=google_beta
        )
```

## Argument Reference

The following arguments are supported:


* `authorized_network` -
  (Required)
  The full names of the Google Compute Engine networks to which the instance is connected. Caller needs to make sure that CIDR subnets do not overlap between networks, else peering creation will fail.

* `domain_resource` -
  (Required)
  Full domain resource path for the Managed AD Domain involved in peering. The resource path should be in the form projects/{projectId}/locations/global/domains/{domainName}

* `peering_id` -
  (Required)


- - -


* `labels` -
  (Optional)
  Resource labels that can contain user-provided metadata

* `status` -
  (Optional)
  The current state of this Peering.

* `status_message` -
  (Optional)
  Additional information about the current status of this peering, if available.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/global/domains/{{peering_id}}`

* `name` -
  Unique name of the peering in this scope including projects and location using the form: projects/{projectId}/locations/global/peerings/{peeringId}.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import

This resource does not support import.

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).

<!-- cache-key: cdktf-0.17.0-pre.15 input-6df5c2bfc33afea25f28ab92b3179ca3895c126a5b67a927f962d93883d0d545 -->