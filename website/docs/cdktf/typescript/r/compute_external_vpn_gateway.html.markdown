---

<!-- Please do not edit this file, it is generated. -->
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Compute Engine"
description: |-
  Represents a VPN gateway managed outside of GCP.
---

# google\_compute\_external\_vpn\_gateway

Represents a VPN gateway managed outside of GCP.


To get more information about ExternalVpnGateway, see:

* [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/externalVpnGateways)

<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=external_vpn_gateway&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - External Vpn Gateway


```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const googleComputeExternalVpnGatewayExternalGateway =
      new google.computeExternalVpnGateway.ComputeExternalVpnGateway(
        this,
        "external_gateway",
        {
          description: "An externally managed VPN gateway",
          interface: [
            {
              id: 0,
              ipAddress: "8.8.8.8",
            },
          ],
          name: "external-gateway",
          redundancyType: "SINGLE_IP_INTERNALLY_REDUNDANT",
        }
      );
    const googleComputeNetworkNetwork =
      new google.computeNetwork.ComputeNetwork(this, "network", {
        autoCreateSubnetworks: false,
        name: "network-1",
        routingMode: "GLOBAL",
      });
    const googleComputeRouterRouter1 = new google.computeRouter.ComputeRouter(
      this,
      "router1",
      {
        bgp: {
          asn: 64514,
        },
        name: "ha-vpn-router1",
        network: cdktf.Token.asString(googleComputeNetworkNetwork.name),
      }
    );
    new google.computeSubnetwork.ComputeSubnetwork(this, "network_subnet1", {
      ipCidrRange: "10.0.1.0/24",
      name: "ha-vpn-subnet-1",
      network: cdktf.Token.asString(googleComputeNetworkNetwork.id),
      region: "us-central1",
    });
    new google.computeSubnetwork.ComputeSubnetwork(this, "network_subnet2", {
      ipCidrRange: "10.0.2.0/24",
      name: "ha-vpn-subnet-2",
      network: cdktf.Token.asString(googleComputeNetworkNetwork.id),
      region: "us-west1",
    });
    const googleComputeHaVpnGatewayHaGateway =
      new google.computeHaVpnGateway.ComputeHaVpnGateway(this, "ha_gateway", {
        name: "ha-vpn",
        network: cdktf.Token.asString(googleComputeNetworkNetwork.id),
        region: "us-central1",
      });
    const googleComputeVpnTunnelTunnel1 =
      new google.computeVpnTunnel.ComputeVpnTunnel(this, "tunnel1", {
        name: "ha-vpn-tunnel1",
        peerExternalGateway: cdktf.Token.asString(
          googleComputeExternalVpnGatewayExternalGateway.id
        ),
        peerExternalGatewayInterface: 0,
        region: "us-central1",
        router: cdktf.Token.asString(googleComputeRouterRouter1.id),
        sharedSecret: "a secret message",
        vpnGateway: cdktf.Token.asString(googleComputeHaVpnGatewayHaGateway.id),
        vpnGatewayInterface: 0,
      });
    const googleComputeVpnTunnelTunnel2 =
      new google.computeVpnTunnel.ComputeVpnTunnel(this, "tunnel2", {
        name: "ha-vpn-tunnel2",
        peerExternalGateway: cdktf.Token.asString(
          googleComputeExternalVpnGatewayExternalGateway.id
        ),
        peerExternalGatewayInterface: 0,
        region: "us-central1",
        router: " ${" + googleComputeRouterRouter1.id + "}",
        sharedSecret: "a secret message",
        vpnGateway: cdktf.Token.asString(googleComputeHaVpnGatewayHaGateway.id),
        vpnGatewayInterface: 1,
      });
    const googleComputeRouterInterfaceRouter1Interface1 =
      new google.computeRouterInterface.ComputeRouterInterface(
        this,
        "router1_interface1",
        {
          ipRange: "169.254.0.1/30",
          name: "router1-interface1",
          region: "us-central1",
          router: cdktf.Token.asString(googleComputeRouterRouter1.name),
          vpnTunnel: cdktf.Token.asString(googleComputeVpnTunnelTunnel1.name),
        }
      );
    const googleComputeRouterInterfaceRouter1Interface2 =
      new google.computeRouterInterface.ComputeRouterInterface(
        this,
        "router1_interface2",
        {
          ipRange: "169.254.1.1/30",
          name: "router1-interface2",
          region: "us-central1",
          router: cdktf.Token.asString(googleComputeRouterRouter1.name),
          vpnTunnel: cdktf.Token.asString(googleComputeVpnTunnelTunnel2.name),
        }
      );
    new google.computeRouterPeer.ComputeRouterPeer(this, "router1_peer1", {
      advertisedRoutePriority: 100,
      interface: cdktf.Token.asString(
        googleComputeRouterInterfaceRouter1Interface1.name
      ),
      name: "router1-peer1",
      peerAsn: 64515,
      peerIpAddress: "169.254.0.2",
      region: "us-central1",
      router: cdktf.Token.asString(googleComputeRouterRouter1.name),
    });
    new google.computeRouterPeer.ComputeRouterPeer(this, "router1_peer2", {
      advertisedRoutePriority: 100,
      interface: cdktf.Token.asString(
        googleComputeRouterInterfaceRouter1Interface2.name
      ),
      name: "router1-peer2",
      peerAsn: 64515,
      peerIpAddress: "169.254.1.2",
      region: "us-central1",
      router: cdktf.Token.asString(googleComputeRouterRouter1.name),
    });
  }
}

```

## Argument Reference

The following arguments are supported:


* `name` -
  (Required)
  Name of the resource. Provided by the client when the resource is
  created. The name must be 1-63 characters long, and comply with
  RFC1035.  Specifically, the name must be 1-63 characters long and
  match the regular expression `[aZ]([AZ09]*[aZ09])?` which means
  the first character must be a lowercase letter, and all following
  characters must be a dash, lowercase letter, or digit, except the last
  character, which cannot be a dash.


- - -


* `description` -
  (Optional)
  An optional description of this resource.

* `labels` -
  (Optional)
  Labels for the external VPN gateway resource.

* `redundancyType` -
  (Optional)
  Indicates the redundancy type of this external VPN gateway
  Possible values are: `fourIpsRedundancy`, `singleIpInternallyRedundant`, `twoIpsRedundancy`.

* `interface` -
  (Optional)
  A list of interfaces on this external VPN gateway.
  Structure is [documented below](#nested_interface).

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


<a name="nested_interface"></a>The `interface` block supports:

* `id` -
  (Optional)
  The numeric ID for this interface. Allowed values are based on the redundancy type
  of this external VPN gateway
  * `0 - SINGLE_IP_INTERNALLY_REDUNDANT`
  * `0, 1 - TWO_IPS_REDUNDANCY`
  * `0, 1, 2, 3 - FOUR_IPS_REDUNDANCY`

* `ipAddress` -
  (Optional)
  IP address of the interface in the external VPN gateway.
  Only IPv4 is supported. This IP address can be either from
  your on-premise gateway or another Cloud provider's VPN gateway,
  it cannot be an IP address from Google Compute Engine.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/global/externalVpnGateways/{{name}}`
* `selfLink` - The URI of the created resource.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


ExternalVpnGateway can be imported using any of these accepted formats:

```
$ terraform import google_compute_external_vpn_gateway.default projects/{{project}}/global/externalVpnGateways/{{name}}
$ terraform import google_compute_external_vpn_gateway.default {{project}}/{{name}}
$ terraform import google_compute_external_vpn_gateway.default {{name}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).

<!-- cache-key: cdktf-0.17.0-pre.15 input-2679a4902556c7da548fef54ea774f75b0c43529b31fc9dc4672e0e2b75fc9b5 -->