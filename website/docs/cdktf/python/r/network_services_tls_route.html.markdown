---

<!-- Please do not edit this file, it is generated. -->
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Network services"
description: |-
  TlsRoute defines how traffic should be routed based on SNI and other matching L3 attributes.
---

# google\_network\_services\_tls\_route

TlsRoute defines how traffic should be routed based on SNI and other matching L3 attributes.

~> **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
See [Provider Versions](https://terraform.io/docs/providers/google/guides/provider_versions.html) for more details on beta resources.

To get more information about TlsRoute, see:

* [API documentation](https://cloud.google.com/traffic-director/docs/reference/network-services/rest/v1beta1/projects.locations.tlsRoutes)

<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=network_services_tls_route_basic&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Network Services Tls Route Basic


```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_compute_http_health_check_default =
        google.compute_http_health_check.ComputeHttpHealthCheck(self, "default",
            check_interval_sec=1,
            name="backend-service-health-check",
            provider=google_beta,
            request_path="/",
            timeout_sec=1
        )
        google_compute_backend_service_default =
        google.compute_backend_service.ComputeBackendService(self, "default_1",
            health_checks=[
                cdktf.Token.as_string(google_compute_http_health_check_default.id)
            ],
            name="my-backend-service",
            provider=google_beta
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_compute_backend_service_default.override_logical_id("default")
        google_network_services_tls_route_default =
        google.NetworkServicesTlsRoute(self, "default_2",
            description="my description",
            name="my-tls-route",
            provider=google_beta,
            rules=[{
                "action": [{
                    "destinations": [{
                        "service_name": google_compute_backend_service_default.id,
                        "weight": 1
                    }
                    ]
                }
                ],
                "matches": [{
                    "alpn": ["http/1.1"],
                    "sni_host": ["example.com"]
                }
                ]
            }
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_network_services_tls_route_default.override_logical_id("default")
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=network_services_tls_route_mesh_basic&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Network Services Tls Route Mesh Basic


```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_compute_http_health_check_default =
        google.compute_http_health_check.ComputeHttpHealthCheck(self, "default",
            check_interval_sec=1,
            name="backend-service-health-check",
            provider=google_beta,
            request_path="/",
            timeout_sec=1
        )
        google_network_services_mesh_default = google.NetworkServicesMesh(self, "default_1",
            description="my description",
            labels=[{
                "foo": "bar"
            }
            ],
            name="my-tls-route",
            provider=google_beta
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_network_services_mesh_default.override_logical_id("default")
        google_compute_backend_service_default =
        google.compute_backend_service.ComputeBackendService(self, "default_2",
            health_checks=[
                cdktf.Token.as_string(google_compute_http_health_check_default.id)
            ],
            name="my-backend-service",
            provider=google_beta
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_compute_backend_service_default.override_logical_id("default")
        google_network_services_tls_route_default =
        google.NetworkServicesTlsRoute(self, "default_3",
            description="my description",
            meshes=[google_network_services_mesh_default.id],
            name="my-tls-route",
            provider=google_beta,
            rules=[{
                "action": [{
                    "destinations": [{
                        "service_name": google_compute_backend_service_default.id,
                        "weight": 1
                    }
                    ]
                }
                ],
                "matches": [{
                    "alpn": ["http/1.1"],
                    "sni_host": ["example.com"]
                }
                ]
            }
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_network_services_tls_route_default.override_logical_id("default")
```
<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=network_services_tls_route_gateway_basic&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Network Services Tls Route Gateway Basic


```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_compute_http_health_check_default =
        google.compute_http_health_check.ComputeHttpHealthCheck(self, "default",
            check_interval_sec=1,
            name="backend-service-health-check",
            provider=google_beta,
            request_path="/",
            timeout_sec=1
        )
        google_network_services_gateway_default =
        google.NetworkServicesGateway(self, "default_1",
            description="my description",
            labels=[{
                "foo": "bar"
            }
            ],
            name="my-tls-route",
            ports=[443],
            provider=google_beta,
            scope="my-scope",
            type="OPEN_MESH"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_network_services_gateway_default.override_logical_id("default")
        google_compute_backend_service_default =
        google.compute_backend_service.ComputeBackendService(self, "default_2",
            health_checks=[
                cdktf.Token.as_string(google_compute_http_health_check_default.id)
            ],
            name="my-backend-service",
            provider=google_beta
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_compute_backend_service_default.override_logical_id("default")
        google_network_services_tls_route_default =
        google.NetworkServicesTlsRoute(self, "default_3",
            description="my description",
            gateways=[google_network_services_gateway_default.id],
            name="my-tls-route",
            provider=google_beta,
            rules=[{
                "action": [{
                    "destinations": [{
                        "service_name": google_compute_backend_service_default.id,
                        "weight": 1
                    }
                    ]
                }
                ],
                "matches": [{
                    "alpn": ["http/1.1"],
                    "sni_host": ["example.com"]
                }
                ]
            }
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_network_services_tls_route_default.override_logical_id("default")
```

## Argument Reference

The following arguments are supported:


* `rules` -
  (Required)
  Rules that define how traffic is routed and handled.
  Structure is [documented below](#nested_rules).

* `name` -
  (Required)
  Name of the TlsRoute resource.


<a name="nested_rules"></a>The `rules` block supports:

* `matches` -
  (Required)
  Matches define the predicate used to match requests to a given action.
  Structure is [documented below](#nested_matches).

* `action` -
  (Required)
  Required. A detailed rule defining how to route traffic.
  Structure is [documented below](#nested_action).


<a name="nested_matches"></a>The `matches` block supports:

* `sni_host` -
  (Optional)
  SNI (server name indicator) to match against. SNI will be matched against all wildcard domains, i.e. www.example.com will be first matched against www.example.com, then *.example.com, then *.com.
  Partial wildcards are not supported, and values like *w.example.com are invalid. At least one of sniHost and alpn is required. Up to 5 sni hosts across all matches can be set.

* `alpn` -
  (Optional)
  ALPN (Application-Layer Protocol Negotiation) to match against. Examples: "http/1.1", "h2". At least one of sniHost and alpn is required. Up to 5 alpns across all matches can be set.

<a name="nested_action"></a>The `action` block supports:

* `destinations` -
  (Optional)
  The destination to which traffic should be forwarded.
  Structure is [documented below](#nested_destinations).


<a name="nested_destinations"></a>The `destinations` block supports:

* `service_name` -
  (Optional)
  The URL of a BackendService to route traffic to.

* `weight` -
  (Optional)
  Specifies the proportion of requests forwarded to the backend referenced by the serviceName field.

- - -


* `description` -
  (Optional)
  A free-text description of the resource. Max length 1024 characters.

* `meshes` -
  (Optional)
  Meshes defines a list of meshes this TlsRoute is attached to, as one of the routing rules to route the requests served by the mesh.
  Each mesh reference should match the pattern: projects/*/locations/global/meshes/<mesh_name>
  The attached Mesh should be of a type SIDECAR

* `gateways` -
  (Optional)
  Gateways defines a list of gateways this TlsRoute is attached to, as one of the routing rules to route the requests served by the gateway.
  Each gateway reference should match the pattern: projects/*/locations/global/gateways/<gateway_name>

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/global/tlsRoutes/{{name}}`

* `self_link` -
  Server-defined URL of this resource.

* `create_time` -
  Time the TlsRoute was created in UTC.

* `update_time` -
  Time the TlsRoute was updated in UTC.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 30 minutes.
- `update` - Default is 30 minutes.
- `delete` - Default is 30 minutes.

## Import


TlsRoute can be imported using any of these accepted formats:

```
$ terraform import google_network_services_tls_route.default projects/{{project}}/locations/global/tlsRoutes/{{name}}
$ terraform import google_network_services_tls_route.default {{project}}/{{name}}
$ terraform import google_network_services_tls_route.default {{name}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).

<!-- cache-key: cdktf-0.17.0-pre.15 input-7517e037f943e4a630b2b8408263a57556bc24f737ab4c2161d98dbce2e4892d -->