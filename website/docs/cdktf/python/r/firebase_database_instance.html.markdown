---

<!-- Please do not edit this file, it is generated. -->
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Firebase Realtime Database"
description: |-
  A Firebase Realtime Database instance.
---

# google\_firebase\_database\_instance

A Firebase Realtime Database instance.

~> **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
See [Provider Versions](https://terraform.io/docs/providers/google/guides/provider_versions.html) for more details on beta resources.

To get more information about Instance, see:

* [API documentation](https://firebase.google.com/docs/reference/rest/database/database-management/rest)
* How-to Guides
    * [Official Documentation](https://firebase.google.com/products/realtime-database)

## Example Usage - Firebase Database Instance Basic


```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google.FirebaseDatabaseInstance(self, "basic",
            instance_id="active-db",
            project="my-project-name",
            provider=google_beta,
            region="us-central1"
        )
```
## Example Usage - Firebase Database Instance Full


```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google.FirebaseDatabaseInstance(self, "full",
            desired_state="DISABLED",
            instance_id="disabled-db",
            project="my-project-name",
            provider=google_beta,
            region="europe-west1",
            type="USER_DATABASE"
        )
```
## Example Usage - Firebase Database Instance Default Database


```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_project_default = google.project.Project(self, "default",
            labels={
                "firebase": "enabled"
            },
            name="rtdb-project",
            org_id="123456789",
            project_id="rtdb-project",
            provider=google_beta
        )
        google_firebase_project_default = google.FirebaseProject(self, "default_1",
            project=google_project_default.project_id,
            provider=google_beta
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_firebase_project_default.override_logical_id("default")
        google_project_service_firebase_database =
        google.project_service.ProjectService(self, "firebase_database",
            project=cdktf.Token.as_string(google_firebase_project_default.project),
            provider=google_beta,
            service="firebasedatabase.googleapis.com"
        )
        google_firebase_database_instance_default =
        google.FirebaseDatabaseInstance(self, "default_3",
            depends_on=[google_project_service_firebase_database],
            instance_id="rtdb-project-default-rtdb",
            project=google_firebase_project_default.project,
            provider=google_beta,
            region="us-central1",
            type="DEFAULT_DATABASE"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        google_firebase_database_instance_default.override_logical_id("default")
```

## Argument Reference

The following arguments are supported:


* `region` -
  (Required)
  A reference to the region where the Firebase Realtime database resides.
  Check all [available regions](https://firebase.google.com/docs/projects/locations#rtdb-locations)

* `instance_id` -
  (Required)
  The globally unique identifier of the Firebase Realtime Database instance.
  Instance IDs cannot be reused after deletion.


- - -


* `type` -
  (Optional)
  The database type.
  Each project can create one default Firebase Realtime Database, which cannot be deleted once created.
  Creating user Databases is only available for projects on the Blaze plan.
  Projects can be upgraded using the Cloud Billing API https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo.
  Default value is `USER_DATABASE`.
  Possible values are: `DEFAULT_DATABASE`, `USER_DATABASE`.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.

* `desired_state` - (Optional) The intended database state.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{region}}/instances/{{instance_id}}`

* `name` -
  The fully-qualified resource name of the Firebase Realtime Database, in the
  format: projects/PROJECT_NUMBER/locations/REGION_IDENTIFIER/instances/INSTANCE_ID
  PROJECT_NUMBER: The Firebase project's [`ProjectNumber`](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number)
  Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).

* `database_url` -
  The database URL in the form of https://{instance-id}.firebaseio.com for us-central1 instances
  or https://{instance-id}.{region}.firebasedatabase.app in other regions.

* `state` -
  The current database state. Set desired_state to :DISABLED to disable the database and :ACTIVE to reenable the database


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


Instance can be imported using any of these accepted formats:

```
$ terraform import google_firebase_database_instance.default projects/{{project}}/locations/{{region}}/instances/{{instance_id}}
$ terraform import google_firebase_database_instance.default {{project}}/{{region}}/{{instance_id}}
$ terraform import google_firebase_database_instance.default {{region}}/{{instance_id}}
$ terraform import google_firebase_database_instance.default {{instance_id}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).

<!-- cache-key: cdktf-0.17.0-pre.15 input-df59cb65119c7a563853d7f27dee33631365ae3c6e407d736265730d88861ebb -->