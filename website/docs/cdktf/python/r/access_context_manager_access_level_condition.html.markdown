---

<!-- Please do not edit this file, it is generated. -->
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Access Context Manager (VPC Service Controls)"
description: |-
  Allows configuring a single access level condition to be appended to an access level's conditions.
---

# google\_access\_context\_manager\_access\_level\_condition

Allows configuring a single access level condition to be appended to an access level's conditions.
This resource is intended to be used in cases where it is not possible to compile a full list
of conditions to include in a `google_access_context_manager_access_level` resource,
to enable them to be added separately.

~> **Note:** If this resource is used alongside a `google_access_context_manager_access_level` resource,
the access level resource must have a `lifecycle` block with `ignore_changes = [basic[0].conditions]` so
they don't fight over which service accounts should be included.


To get more information about AccessLevelCondition, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.accessLevels)
* How-to Guides
    * [Access Policy Quickstart](https://cloud.google.com/access-context-manager/docs/quickstart)

~> **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
you must specify a `billing_project` and set `user_project_override` to true
in the provider configuration. Otherwise the ACM API will return a 403 error.
Your account must have the `serviceusage.services.use` permission on the
`billing_project` you defined.

## Example Usage - Access Context Manager Access Level Condition Basic


```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.google as google
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        google_access_context_manager_access_policy_access_policy =
        google.access_context_manager_access_policy.AccessContextManagerAccessPolicy(self, "access-policy",
            parent="organizations/123456789",
            title="my policy"
        )
        google_service_account_created_later =
        google.service_account.ServiceAccount(self, "created-later",
            account_id="my-account-id"
        )
        google_access_context_manager_access_level_access_level_service_account =
        google.access_context_manager_access_level.AccessContextManagerAccessLevel(self, "access-level-service-account",
            basic=AccessContextManagerAccessLevelBasic(
                conditions=[AccessContextManagerAccessLevelBasicConditions(
                    device_policy=AccessContextManagerAccessLevelBasicConditionsDevicePolicy(
                        os_constraints=[AccessContextManagerAccessLevelBasicConditionsDevicePolicyOsConstraints(
                            os_type="DESKTOP_CHROME_OS"
                        )
                        ],
                        require_screen_lock=True
                    ),
                    regions=["CH", "IT", "US"]
                )
                ]
            ),
            lifecycle=cdktf.TerraformResourceLifecycle(
                ignore_changes=[basic0.conditions]
            ),
            name="accessPolicies/${" + google_access_context_manager_access_policy_access_policy.name + "}/accessLevels/chromeos_no_lock",
            parent="accessPolicies/${" + google_access_context_manager_access_policy_access_policy.name + "}",
            title="chromeos_no_lock"
        )
        google.access_context_manager_access_level_condition.AccessContextManagerAccessLevelCondition(self, "access-level-conditions",
            access_level=cdktf.Token.as_string(google_access_context_manager_access_level_access_level_service_account.name),
            device_policy=AccessContextManagerAccessLevelConditionDevicePolicy(
                os_constraints=[AccessContextManagerAccessLevelConditionDevicePolicyOsConstraints(
                    os_type="DESKTOP_CHROME_OS"
                )
                ],
                require_admin_approval=False,
                require_corp_owned=True,
                require_screen_lock=False
            ),
            ip_subnetworks=["192.0.4.0/24"],
            members=["user:test@google.com", "user:test2@google.com", "serviceAccount:${" + google_service_account_created_later.email + "}"
            ],
            negate=False,
            regions=["IT", "US"]
        )
```

## Argument Reference

The following arguments are supported:


* `access_level` -
  (Required)
  The name of the Access Level to add this condition to.


- - -


* `ip_subnetworks` -
  (Optional)
  A list of CIDR block IP subnetwork specification. May be IPv4
  or IPv6.
  Note that for a CIDR IP address block, the specified IP address
  portion must be properly truncated (i.e. all the host bits must
  be zero) or the input is considered malformed. For example,
  "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,
  for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"
  is not. The originating IP of a request must be in one of the
  listed subnets in order for this Condition to be true.
  If empty, all IP addresses are allowed.

* `required_access_levels` -
  (Optional)
  A list of other access levels defined in the same Policy,
  referenced by resource name. Referencing an AccessLevel which
  does not exist is an error. All access levels listed must be
  granted for the Condition to be true.
  Format: accessPolicies/{policy_id}/accessLevels/{short_name}

* `members` -
  (Optional)
  An allowed list of members (users, service accounts).
  Using groups is not supported yet.
  The signed-in user originating the request must be a part of one
  of the provided members. If not specified, a request may come
  from any user (logged in/not logged in, not present in any
  groups, etc.).
  Formats: `user:{emailid}`, `serviceAccount:{emailid}`

* `negate` -
  (Optional)
  Whether to negate the Condition. If true, the Condition becomes
  a NAND over its non-empty fields, each field must be false for
  the Condition overall to be satisfied. Defaults to false.

* `device_policy` -
  (Optional)
  Device specific restrictions, all restrictions must hold for
  the Condition to be true. If not specified, all devices are
  allowed.
  Structure is [documented below](#nested_device_policy).

* `regions` -
  (Optional)
  The request must originate from one of the provided
  countries/regions.
  Format: A valid ISO 3166-1 alpha-2 code.


<a name="nested_device_policy"></a>The `device_policy` block supports:

* `require_screen_lock` -
  (Optional)
  Whether or not screenlock is required for the DevicePolicy
  to be true. Defaults to false.

* `allowed_encryption_statuses` -
  (Optional)
  A list of allowed encryptions statuses.
  An empty list allows all statuses.
  Each value may be one of: `ENCRYPTION_UNSPECIFIED`, `ENCRYPTION_UNSUPPORTED`, `UNENCRYPTED`, `ENCRYPTED`.

* `allowed_device_management_levels` -
  (Optional)
  A list of allowed device management levels.
  An empty list allows all management levels.
  Each value may be one of: `MANAGEMENT_UNSPECIFIED`, `NONE`, `BASIC`, `COMPLETE`.

* `os_constraints` -
  (Optional)
  A list of allowed OS versions.
  An empty list allows all types and all versions.
  Structure is [documented below](#nested_os_constraints).

* `require_admin_approval` -
  (Optional)
  Whether the device needs to be approved by the customer admin.

* `require_corp_owned` -
  (Optional)
  Whether the device needs to be corp owned.


<a name="nested_os_constraints"></a>The `os_constraints` block supports:

* `minimum_version` -
  (Optional)
  The minimum allowed OS version. If not set, any version
  of this OS satisfies the constraint.
  Format: "major.minor.patch" such as "10.5.301", "9.2.1".

* `os_type` -
  (Required)
  The operating system type of the device.
  Possible values are: `OS_UNSPECIFIED`, `DESKTOP_MAC`, `DESKTOP_WINDOWS`, `DESKTOP_LINUX`, `DESKTOP_CHROME_OS`, `ANDROID`, `IOS`.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `{{access_level}}`


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import

This resource does not support import.

<!-- cache-key: cdktf-0.17.0-pre.15 input-aed3232a789a15a00f2b680a17fa60ad88b34445e58c3977377defe18b6ee64b -->